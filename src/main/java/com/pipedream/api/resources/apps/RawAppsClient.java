/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.apps;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.PipedreamApiClientApiException;
import com.pipedream.api.core.PipedreamApiClientException;
import com.pipedream.api.core.PipedreamApiClientHttpResponse;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.apps.requests.AppsListRequest;
import com.pipedream.api.types.App;
import com.pipedream.api.types.GetAppResponse;
import com.pipedream.api.types.ListAppsResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawAppsClient {
    protected final ClientOptions clientOptions;

    public RawAppsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public PipedreamApiClientHttpResponse<SyncPagingIterable<App>> list() {
        return list(AppsListRequest.builder().build());
    }

    public PipedreamApiClientHttpResponse<SyncPagingIterable<App>> list(AppsListRequest request) {
        return list(request, null);
    }

    public PipedreamApiClientHttpResponse<SyncPagingIterable<App>> list(
            AppsListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect/apps");
        if (request.getAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "after", request.getAfter().get(), false);
        }
        if (request.getBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "before", request.getBefore().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getQ().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "q", request.getQ().get(), false);
        }
        if (request.getSortKey().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_key", request.getSortKey().get(), false);
        }
        if (request.getSortDirection().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_direction", request.getSortDirection().get(), false);
        }
        if (request.getCategoryIds().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "category_ids", request.getCategoryIds().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                ListAppsResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListAppsResponse.class);
                Optional<String> startingAfter = parsedResponse.getPageInfo().getEndCursor();
                AppsListRequest nextRequest = AppsListRequest.builder()
                        .from(request)
                        .after(startingAfter)
                        .build();
                List<App> result = parsedResponse.getData();
                return new PipedreamApiClientHttpResponse<>(
                        new SyncPagingIterable<App>(
                                startingAfter.isPresent(), result, () -> list(nextRequest, requestOptions)
                                        .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiClientException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiClientHttpResponse<GetAppResponse> retrieve(String appId) {
        return retrieve(appId, null);
    }

    public PipedreamApiClientHttpResponse<GetAppResponse> retrieve(String appId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect/apps")
                .addPathSegment(appId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiClientHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetAppResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiClientApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiClientException("Network error executing HTTP request", e);
        }
    }
}
