/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.apps.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.resources.apps.types.AppsListRequestSortDirection;
import com.pipedream.api.resources.apps.types.AppsListRequestSortKey;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AppsListRequest.Builder.class)
public final class AppsListRequest {
    private final Optional<List<String>> categoryIds;

    private final Optional<String> after;

    private final Optional<String> before;

    private final Optional<Integer> limit;

    private final Optional<String> q;

    private final Optional<AppsListRequestSortKey> sortKey;

    private final Optional<AppsListRequestSortDirection> sortDirection;

    private final Map<String, Object> additionalProperties;

    private AppsListRequest(
            Optional<List<String>> categoryIds,
            Optional<String> after,
            Optional<String> before,
            Optional<Integer> limit,
            Optional<String> q,
            Optional<AppsListRequestSortKey> sortKey,
            Optional<AppsListRequestSortDirection> sortDirection,
            Map<String, Object> additionalProperties) {
        this.categoryIds = categoryIds;
        this.after = after;
        this.before = before;
        this.limit = limit;
        this.q = q;
        this.sortKey = sortKey;
        this.sortDirection = sortDirection;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Only return apps in these categories
     */
    @JsonProperty("category_ids")
    public Optional<List<String>> getCategoryIds() {
        return categoryIds;
    }

    /**
     * @return The cursor to start from for pagination
     */
    @JsonProperty("after")
    public Optional<String> getAfter() {
        return after;
    }

    /**
     * @return The cursor to end before for pagination
     */
    @JsonProperty("before")
    public Optional<String> getBefore() {
        return before;
    }

    /**
     * @return The maximum number of results to return
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return A search query to filter the apps
     */
    @JsonProperty("q")
    public Optional<String> getQ() {
        return q;
    }

    /**
     * @return The key to sort the apps by
     */
    @JsonProperty("sort_key")
    public Optional<AppsListRequestSortKey> getSortKey() {
        return sortKey;
    }

    /**
     * @return The direction to sort the apps
     */
    @JsonProperty("sort_direction")
    public Optional<AppsListRequestSortDirection> getSortDirection() {
        return sortDirection;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AppsListRequest && equalTo((AppsListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AppsListRequest other) {
        return categoryIds.equals(other.categoryIds)
                && after.equals(other.after)
                && before.equals(other.before)
                && limit.equals(other.limit)
                && q.equals(other.q)
                && sortKey.equals(other.sortKey)
                && sortDirection.equals(other.sortDirection);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.categoryIds, this.after, this.before, this.limit, this.q, this.sortKey, this.sortDirection);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<String>> categoryIds = Optional.empty();

        private Optional<String> after = Optional.empty();

        private Optional<String> before = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<String> q = Optional.empty();

        private Optional<AppsListRequestSortKey> sortKey = Optional.empty();

        private Optional<AppsListRequestSortDirection> sortDirection = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AppsListRequest other) {
            categoryIds(other.getCategoryIds());
            after(other.getAfter());
            before(other.getBefore());
            limit(other.getLimit());
            q(other.getQ());
            sortKey(other.getSortKey());
            sortDirection(other.getSortDirection());
            return this;
        }

        /**
         * <p>Only return apps in these categories</p>
         */
        @JsonSetter(value = "category_ids", nulls = Nulls.SKIP)
        public Builder categoryIds(Optional<List<String>> categoryIds) {
            this.categoryIds = categoryIds;
            return this;
        }

        public Builder categoryIds(List<String> categoryIds) {
            this.categoryIds = Optional.ofNullable(categoryIds);
            return this;
        }

        public Builder categoryIds(String categoryIds) {
            this.categoryIds = Optional.of(Collections.singletonList(categoryIds));
            return this;
        }

        /**
         * <p>The cursor to start from for pagination</p>
         */
        @JsonSetter(value = "after", nulls = Nulls.SKIP)
        public Builder after(Optional<String> after) {
            this.after = after;
            return this;
        }

        public Builder after(String after) {
            this.after = Optional.ofNullable(after);
            return this;
        }

        /**
         * <p>The cursor to end before for pagination</p>
         */
        @JsonSetter(value = "before", nulls = Nulls.SKIP)
        public Builder before(Optional<String> before) {
            this.before = before;
            return this;
        }

        public Builder before(String before) {
            this.before = Optional.ofNullable(before);
            return this;
        }

        /**
         * <p>The maximum number of results to return</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>A search query to filter the apps</p>
         */
        @JsonSetter(value = "q", nulls = Nulls.SKIP)
        public Builder q(Optional<String> q) {
            this.q = q;
            return this;
        }

        public Builder q(String q) {
            this.q = Optional.ofNullable(q);
            return this;
        }

        /**
         * <p>The key to sort the apps by</p>
         */
        @JsonSetter(value = "sort_key", nulls = Nulls.SKIP)
        public Builder sortKey(Optional<AppsListRequestSortKey> sortKey) {
            this.sortKey = sortKey;
            return this;
        }

        public Builder sortKey(AppsListRequestSortKey sortKey) {
            this.sortKey = Optional.ofNullable(sortKey);
            return this;
        }

        /**
         * <p>The direction to sort the apps</p>
         */
        @JsonSetter(value = "sort_direction", nulls = Nulls.SKIP)
        public Builder sortDirection(Optional<AppsListRequestSortDirection> sortDirection) {
            this.sortDirection = sortDirection;
            return this;
        }

        public Builder sortDirection(AppsListRequestSortDirection sortDirection) {
            this.sortDirection = Optional.ofNullable(sortDirection);
            return this;
        }

        public AppsListRequest build() {
            return new AppsListRequest(
                    categoryIds, after, before, limit, q, sortKey, sortDirection, additionalProperties);
        }
    }
}
