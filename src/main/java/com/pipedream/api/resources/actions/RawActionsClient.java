/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.actions;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.MediaTypes;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.PipedreamApiApiException;
import com.pipedream.api.core.PipedreamApiException;
import com.pipedream.api.core.PipedreamApiHttpResponse;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.actions.requests.ActionsConfigurePropRequest;
import com.pipedream.api.resources.actions.requests.ActionsListRequest;
import com.pipedream.api.resources.actions.requests.ActionsReloadPropsRequest;
import com.pipedream.api.resources.actions.requests.RunActionOpts;
import com.pipedream.api.types.Component;
import com.pipedream.api.types.ConfigurePropResponse;
import com.pipedream.api.types.GetComponentResponse;
import com.pipedream.api.types.GetComponentsResponse;
import com.pipedream.api.types.ReloadPropsResponse;
import com.pipedream.api.types.RunActionResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawActionsClient {
    protected final ClientOptions clientOptions;

    public RawActionsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public PipedreamApiHttpResponse<SyncPagingIterable<Component>> list() {
        return list(ActionsListRequest.builder().build());
    }

    public PipedreamApiHttpResponse<SyncPagingIterable<Component>> list(ActionsListRequest request) {
        return list(request, null);
    }

    public PipedreamApiHttpResponse<SyncPagingIterable<Component>> list(
            ActionsListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("actions");
        if (request.getAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "after", request.getAfter().get(), false);
        }
        if (request.getBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "before", request.getBefore().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getQ().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "q", request.getQ().get(), false);
        }
        if (request.getApp().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "app", request.getApp().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                GetComponentsResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetComponentsResponse.class);
                Optional<String> startingAfter = parsedResponse.getPageInfo().getEndCursor();
                ActionsListRequest nextRequest = ActionsListRequest.builder()
                        .from(request)
                        .after(startingAfter)
                        .build();
                List<Component> result = parsedResponse.getData();
                return new PipedreamApiHttpResponse<>(
                        new SyncPagingIterable<Component>(
                                startingAfter.isPresent(), result, () -> list(nextRequest, requestOptions)
                                        .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<Component> retrieve(String componentId) {
        return retrieve(componentId, null);
    }

    public PipedreamApiHttpResponse<Component> retrieve(String componentId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("actions")
                .addPathSegment(componentId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                GetComponentResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetComponentResponse.class);
                return new PipedreamApiHttpResponse<>(parsedResponse.getData(), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<ConfigurePropResponse> configureProp(ActionsConfigurePropRequest request) {
        return configureProp(request, null);
    }

    public PipedreamApiHttpResponse<ConfigurePropResponse> configureProp(
            ActionsConfigurePropRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("actions/configure")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getAsyncHandle().isPresent()) {
            _requestBuilder.addHeader("x-async-handle", request.getAsyncHandle().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ConfigurePropResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<ReloadPropsResponse> reloadProps(ActionsReloadPropsRequest request) {
        return reloadProps(request, null);
    }

    public PipedreamApiHttpResponse<ReloadPropsResponse> reloadProps(
            ActionsReloadPropsRequest request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("actions/props")
                .build();
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(request.getBody()), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getAsyncHandle().isPresent()) {
            _requestBuilder.addHeader("x-async-handle", request.getAsyncHandle().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ReloadPropsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<RunActionResponse> run(RunActionOpts request) {
        return run(request, null);
    }

    public PipedreamApiHttpResponse<RunActionResponse> run(RunActionOpts request, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("actions/run")
                .build();
        Map<String, Object> properties = new HashMap<>();
        properties.put("id", request.getId());
        properties.put("external_user_id", request.getExternalUserId());
        if (request.getConfiguredProps().isPresent()) {
            properties.put("configured_props", request.getConfiguredProps());
        }
        if (request.getDynamicPropsId().isPresent()) {
            properties.put("dynamic_props_id", request.getDynamicPropsId());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl)
                .method("POST", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        if (request.getAsyncHandle().isPresent()) {
            _requestBuilder.addHeader("x-async-handle", request.getAsyncHandle().get());
        }
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), RunActionResponse.class), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }
}
