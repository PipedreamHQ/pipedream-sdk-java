/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.deployedtriggers.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateTriggerOpts.Builder.class)
public final class UpdateTriggerOpts {
    private final String externalUserId;

    private final Optional<Boolean> active;

    private final Optional<Map<String, Object>> configuredProps;

    private final Optional<String> name;

    private final Map<String, Object> additionalProperties;

    private UpdateTriggerOpts(
            String externalUserId,
            Optional<Boolean> active,
            Optional<Map<String, Object>> configuredProps,
            Optional<String> name,
            Map<String, Object> additionalProperties) {
        this.externalUserId = externalUserId;
        this.active = active;
        this.configuredProps = configuredProps;
        this.name = name;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The external user ID who owns the trigger
     */
    @JsonProperty("external_user_id")
    public String getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return Whether the trigger should be active
     */
    @JsonProperty("active")
    public Optional<Boolean> getActive() {
        return active;
    }

    /**
     * @return The configured properties for the trigger
     */
    @JsonProperty("configured_props")
    public Optional<Map<String, Object>> getConfiguredProps() {
        return configuredProps;
    }

    /**
     * @return The name of the trigger
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateTriggerOpts && equalTo((UpdateTriggerOpts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateTriggerOpts other) {
        return externalUserId.equals(other.externalUserId)
                && active.equals(other.active)
                && configuredProps.equals(other.configuredProps)
                && name.equals(other.name);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.externalUserId, this.active, this.configuredProps, this.name);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExternalUserIdStage builder() {
        return new Builder();
    }

    public interface ExternalUserIdStage {
        /**
         * <p>The external user ID who owns the trigger</p>
         */
        _FinalStage externalUserId(@NotNull String externalUserId);

        Builder from(UpdateTriggerOpts other);
    }

    public interface _FinalStage {
        UpdateTriggerOpts build();

        /**
         * <p>Whether the trigger should be active</p>
         */
        _FinalStage active(Optional<Boolean> active);

        _FinalStage active(Boolean active);

        /**
         * <p>The configured properties for the trigger</p>
         */
        _FinalStage configuredProps(Optional<Map<String, Object>> configuredProps);

        _FinalStage configuredProps(Map<String, Object> configuredProps);

        /**
         * <p>The name of the trigger</p>
         */
        _FinalStage name(Optional<String> name);

        _FinalStage name(String name);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExternalUserIdStage, _FinalStage {
        private String externalUserId;

        private Optional<String> name = Optional.empty();

        private Optional<Map<String, Object>> configuredProps = Optional.empty();

        private Optional<Boolean> active = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateTriggerOpts other) {
            externalUserId(other.getExternalUserId());
            active(other.getActive());
            configuredProps(other.getConfiguredProps());
            name(other.getName());
            return this;
        }

        /**
         * <p>The external user ID who owns the trigger</p>
         * <p>The external user ID who owns the trigger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("external_user_id")
        public _FinalStage externalUserId(@NotNull String externalUserId) {
            this.externalUserId = Objects.requireNonNull(externalUserId, "externalUserId must not be null");
            return this;
        }

        /**
         * <p>The name of the trigger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The name of the trigger</p>
         */
        @java.lang.Override
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public _FinalStage name(Optional<String> name) {
            this.name = name;
            return this;
        }

        /**
         * <p>The configured properties for the trigger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage configuredProps(Map<String, Object> configuredProps) {
            this.configuredProps = Optional.ofNullable(configuredProps);
            return this;
        }

        /**
         * <p>The configured properties for the trigger</p>
         */
        @java.lang.Override
        @JsonSetter(value = "configured_props", nulls = Nulls.SKIP)
        public _FinalStage configuredProps(Optional<Map<String, Object>> configuredProps) {
            this.configuredProps = configuredProps;
            return this;
        }

        /**
         * <p>Whether the trigger should be active</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage active(Boolean active) {
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * <p>Whether the trigger should be active</p>
         */
        @java.lang.Override
        @JsonSetter(value = "active", nulls = Nulls.SKIP)
        public _FinalStage active(Optional<Boolean> active) {
            this.active = active;
            return this;
        }

        @java.lang.Override
        public UpdateTriggerOpts build() {
            return new UpdateTriggerOpts(externalUserId, active, configuredProps, name, additionalProperties);
        }
    }
}
