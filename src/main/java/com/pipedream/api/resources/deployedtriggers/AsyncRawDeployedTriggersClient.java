/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.deployedtriggers;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.MediaTypes;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.PipedreamApiApiException;
import com.pipedream.api.core.PipedreamApiException;
import com.pipedream.api.core.PipedreamApiHttpResponse;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersDeleteRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListEventsRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListWebhooksRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListWorkflowsRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersRetrieveRequest;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerOpts;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerWebhooksOpts;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerWorkflowsOpts;
import com.pipedream.api.types.DeployedComponent;
import com.pipedream.api.types.EmittedEvent;
import com.pipedream.api.types.GetTriggerEventsResponse;
import com.pipedream.api.types.GetTriggerResponse;
import com.pipedream.api.types.GetTriggerWebhooksResponse;
import com.pipedream.api.types.GetTriggerWorkflowsResponse;
import com.pipedream.api.types.GetTriggersResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawDeployedTriggersClient {
    protected final ClientOptions clientOptions;

    public AsyncRawDeployedTriggersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<PipedreamApiHttpResponse<SyncPagingIterable<DeployedComponent>>> list(
            DeployedTriggersListRequest request) {
        return list(request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<SyncPagingIterable<DeployedComponent>>> list(
            DeployedTriggersListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers");
        if (request.getAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "after", request.getAfter().get(), false);
        }
        if (request.getBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "before", request.getBefore().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<SyncPagingIterable<DeployedComponent>>> future =
                new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        GetTriggersResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggersResponse.class);
                        Optional<String> startingAfter =
                                parsedResponse.getPageInfo().getEndCursor();
                        DeployedTriggersListRequest nextRequest = DeployedTriggersListRequest.builder()
                                .from(request)
                                .after(startingAfter)
                                .build();
                        List<DeployedComponent> result = parsedResponse.getData();
                        future.complete(new PipedreamApiHttpResponse<>(
                                new SyncPagingIterable<DeployedComponent>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<DeployedComponent>> retrieve(
            String triggerId, DeployedTriggersRetrieveRequest request) {
        return retrieve(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<DeployedComponent>> retrieve(
            String triggerId, DeployedTriggersRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<DeployedComponent>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        GetTriggerResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerResponse.class);
                        future.complete(new PipedreamApiHttpResponse<>(parsedResponse.getData(), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<DeployedComponent>> update(
            String triggerId, UpdateTriggerOpts request) {
        return update(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<DeployedComponent>> update(
            String triggerId, UpdateTriggerOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Map<String, Object> properties = new HashMap<>();
        if (request.getActive().isPresent()) {
            properties.put("active", request.getActive());
        }
        if (request.getConfiguredProps().isPresent()) {
            properties.put("configured_props", request.getConfiguredProps());
        }
        if (request.getName().isPresent()) {
            properties.put("name", request.getName());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<DeployedComponent>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        GetTriggerResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerResponse.class);
                        future.complete(new PipedreamApiHttpResponse<>(parsedResponse.getData(), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<Void>> delete(
            String triggerId, DeployedTriggersDeleteRequest request) {
        return delete(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<Void>> delete(
            String triggerId, DeployedTriggersDeleteRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        if (request.getIgnoreHookErrors().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "ignore_hook_errors", request.getIgnoreHookErrors().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<Void>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PipedreamApiHttpResponse<>(null, response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<List<EmittedEvent>>> listEvents(
            String triggerId, DeployedTriggersListEventsRequest request) {
        return listEvents(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<List<EmittedEvent>>> listEvents(
            String triggerId, DeployedTriggersListEventsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("events");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        if (request.getN().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "n", request.getN().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<List<EmittedEvent>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        GetTriggerEventsResponse parsedResponse = ObjectMappers.JSON_MAPPER.readValue(
                                responseBody.string(), GetTriggerEventsResponse.class);
                        future.complete(new PipedreamApiHttpResponse<>(parsedResponse.getData(), response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWorkflowsResponse>> listWorkflows(
            String triggerId, DeployedTriggersListWorkflowsRequest request) {
        return listWorkflows(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWorkflowsResponse>> listWorkflows(
            String triggerId, DeployedTriggersListWorkflowsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("pipelines");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<GetTriggerWorkflowsResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PipedreamApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetTriggerWorkflowsResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWorkflowsResponse>> updateWorkflows(
            String triggerId, UpdateTriggerWorkflowsOpts request) {
        return updateWorkflows(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWorkflowsResponse>> updateWorkflows(
            String triggerId, UpdateTriggerWorkflowsOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("pipelines");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Map<String, Object> properties = new HashMap<>();
        properties.put("workflow_ids", request.getWorkflowIds());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<GetTriggerWorkflowsResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PipedreamApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetTriggerWorkflowsResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWebhooksResponse>> listWebhooks(
            String triggerId, DeployedTriggersListWebhooksRequest request) {
        return listWebhooks(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWebhooksResponse>> listWebhooks(
            String triggerId, DeployedTriggersListWebhooksRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("webhooks");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<GetTriggerWebhooksResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PipedreamApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetTriggerWebhooksResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWebhooksResponse>> updateWebhooks(
            String triggerId, UpdateTriggerWebhooksOpts request) {
        return updateWebhooks(triggerId, request, null);
    }

    public CompletableFuture<PipedreamApiHttpResponse<GetTriggerWebhooksResponse>> updateWebhooks(
            String triggerId, UpdateTriggerWebhooksOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("webhooks");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Map<String, Object> properties = new HashMap<>();
        properties.put("webhook_urls", request.getWebhookUrls());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiHttpResponse<GetTriggerWebhooksResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PipedreamApiHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(
                                        responseBody.string(), GetTriggerWebhooksResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(new PipedreamApiException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
