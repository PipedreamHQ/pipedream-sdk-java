/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.deployedtriggers;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersDeleteRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListEventsRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListWebhooksRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListWorkflowsRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersRetrieveRequest;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerOpts;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerWebhooksOpts;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerWorkflowsOpts;
import com.pipedream.api.types.DeployedComponent;
import com.pipedream.api.types.EmittedEvent;
import com.pipedream.api.types.GetTriggerWebhooksResponse;
import com.pipedream.api.types.GetTriggerWorkflowsResponse;
import java.util.List;
import java.util.concurrent.CompletableFuture;

public class AsyncDeployedTriggersClient {
    protected final ClientOptions clientOptions;

    private final AsyncRawDeployedTriggersClient rawClient;

    public AsyncDeployedTriggersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
        this.rawClient = new AsyncRawDeployedTriggersClient(clientOptions);
    }

    /**
     * Get responses with HTTP metadata like headers
     */
    public AsyncRawDeployedTriggersClient withRawResponse() {
        return this.rawClient;
    }

    public CompletableFuture<SyncPagingIterable<DeployedComponent>> list(DeployedTriggersListRequest request) {
        return this.rawClient.list(request).thenApply(response -> response.body());
    }

    public CompletableFuture<SyncPagingIterable<DeployedComponent>> list(
            DeployedTriggersListRequest request, RequestOptions requestOptions) {
        return this.rawClient.list(request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<DeployedComponent> retrieve(String triggerId, DeployedTriggersRetrieveRequest request) {
        return this.rawClient.retrieve(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<DeployedComponent> retrieve(
            String triggerId, DeployedTriggersRetrieveRequest request, RequestOptions requestOptions) {
        return this.rawClient.retrieve(triggerId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<DeployedComponent> update(String triggerId, UpdateTriggerOpts request) {
        return this.rawClient.update(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<DeployedComponent> update(
            String triggerId, UpdateTriggerOpts request, RequestOptions requestOptions) {
        return this.rawClient.update(triggerId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(String triggerId, DeployedTriggersDeleteRequest request) {
        return this.rawClient.delete(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<Void> delete(
            String triggerId, DeployedTriggersDeleteRequest request, RequestOptions requestOptions) {
        return this.rawClient.delete(triggerId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<List<EmittedEvent>> listEvents(
            String triggerId, DeployedTriggersListEventsRequest request) {
        return this.rawClient.listEvents(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<List<EmittedEvent>> listEvents(
            String triggerId, DeployedTriggersListEventsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listEvents(triggerId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWorkflowsResponse> listWorkflows(
            String triggerId, DeployedTriggersListWorkflowsRequest request) {
        return this.rawClient.listWorkflows(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWorkflowsResponse> listWorkflows(
            String triggerId, DeployedTriggersListWorkflowsRequest request, RequestOptions requestOptions) {
        return this.rawClient.listWorkflows(triggerId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWorkflowsResponse> updateWorkflows(
            String triggerId, UpdateTriggerWorkflowsOpts request) {
        return this.rawClient.updateWorkflows(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWorkflowsResponse> updateWorkflows(
            String triggerId, UpdateTriggerWorkflowsOpts request, RequestOptions requestOptions) {
        return this.rawClient
                .updateWorkflows(triggerId, request, requestOptions)
                .thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWebhooksResponse> listWebhooks(
            String triggerId, DeployedTriggersListWebhooksRequest request) {
        return this.rawClient.listWebhooks(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWebhooksResponse> listWebhooks(
            String triggerId, DeployedTriggersListWebhooksRequest request, RequestOptions requestOptions) {
        return this.rawClient.listWebhooks(triggerId, request, requestOptions).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWebhooksResponse> updateWebhooks(
            String triggerId, UpdateTriggerWebhooksOpts request) {
        return this.rawClient.updateWebhooks(triggerId, request).thenApply(response -> response.body());
    }

    public CompletableFuture<GetTriggerWebhooksResponse> updateWebhooks(
            String triggerId, UpdateTriggerWebhooksOpts request, RequestOptions requestOptions) {
        return this.rawClient.updateWebhooks(triggerId, request, requestOptions).thenApply(response -> response.body());
    }
}
