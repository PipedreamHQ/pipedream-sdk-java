/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.core;

import com.pipedream.api.resources.oauthtokens.OauthTokensClient;
import com.pipedream.api.resources.oauthtokens.requests.CreateOAuthTokenOpts;
import com.pipedream.api.types.CreateOAuthTokenResponse;
import java.time.Instant;
import java.time.temporal.ChronoUnit;
import java.util.function.Supplier;

public final class OAuthTokenSupplier implements Supplier<String> {
    private static final long BUFFER_IN_MINUTES = 2;

    private final String clientId;

    private final String clientSecret;

    private final OauthTokensClient authClient;

    private String accessToken;

    private Instant expiresAt;

    public OAuthTokenSupplier(String clientId, String clientSecret, OauthTokensClient authClient) {
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.authClient = authClient;
        this.expiresAt = Instant.now();
    }

    public CreateOAuthTokenResponse fetchToken() {
        CreateOAuthTokenOpts getTokenRequest = CreateOAuthTokenOpts.builder()
                .clientId(clientId)
                .clientSecret(clientSecret)
                .build();
        return authClient.create(getTokenRequest);
    }

    @java.lang.Override
    public String get() {
        if (accessToken == null || expiresAt.isBefore(Instant.now())) {
            CreateOAuthTokenResponse authResponse = fetchToken();
            this.accessToken = authResponse.getAccessToken();
            this.expiresAt = getExpiresAt(authResponse.getExpiresIn());
        }
        return "Bearer " + accessToken;
    }

    private Instant getExpiresAt(long expiresInSeconds) {
        return Instant.now().plus(expiresInSeconds, ChronoUnit.SECONDS).minus(BUFFER_IN_MINUTES, ChronoUnit.MINUTES);
    }
}
