/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeleteTriggerOpts.Builder.class)
public final class DeleteTriggerOpts {
    private final Optional<Boolean> ignoreHookErrors;

    private final Map<String, Object> additionalProperties;

    private DeleteTriggerOpts(Optional<Boolean> ignoreHookErrors, Map<String, Object> additionalProperties) {
        this.ignoreHookErrors = ignoreHookErrors;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return Whether to ignore errors during deactivation hook
     */
    @JsonProperty("ignore_hook_errors")
    public Optional<Boolean> getIgnoreHookErrors() {
        return ignoreHookErrors;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeleteTriggerOpts && equalTo((DeleteTriggerOpts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeleteTriggerOpts other) {
        return ignoreHookErrors.equals(other.ignoreHookErrors);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.ignoreHookErrors);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Boolean> ignoreHookErrors = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(DeleteTriggerOpts other) {
            ignoreHookErrors(other.getIgnoreHookErrors());
            return this;
        }

        /**
         * <p>Whether to ignore errors during deactivation hook</p>
         */
        @JsonSetter(value = "ignore_hook_errors", nulls = Nulls.SKIP)
        public Builder ignoreHookErrors(Optional<Boolean> ignoreHookErrors) {
            this.ignoreHookErrors = ignoreHookErrors;
            return this;
        }

        public Builder ignoreHookErrors(Boolean ignoreHookErrors) {
            this.ignoreHookErrors = Optional.ofNullable(ignoreHookErrors);
            return this;
        }

        public DeleteTriggerOpts build() {
            return new DeleteTriggerOpts(ignoreHookErrors, additionalProperties);
        }
    }
}
