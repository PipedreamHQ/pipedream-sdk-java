/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConfigurablePropAny.Builder.class)
public final class ConfigurablePropAny {
    private final Optional<String> type;

    private final Optional<String> name;

    private final Optional<String> label;

    private final Optional<String> description;

    private final Optional<Boolean> optional;

    private final Optional<Boolean> disabled;

    private final Optional<Boolean> hidden;

    private final Optional<Boolean> remoteOptions;

    private final Optional<Boolean> useQuery;

    private final Optional<Boolean> reloadProps;

    private final Optional<Boolean> withLabel;

    private final Map<String, Object> additionalProperties;

    private ConfigurablePropAny(
            Optional<String> type,
            Optional<String> name,
            Optional<String> label,
            Optional<String> description,
            Optional<Boolean> optional,
            Optional<Boolean> disabled,
            Optional<Boolean> hidden,
            Optional<Boolean> remoteOptions,
            Optional<Boolean> useQuery,
            Optional<Boolean> reloadProps,
            Optional<Boolean> withLabel,
            Map<String, Object> additionalProperties) {
        this.type = type;
        this.name = name;
        this.label = label;
        this.description = description;
        this.optional = optional;
        this.disabled = disabled;
        this.hidden = hidden;
        this.remoteOptions = remoteOptions;
        this.useQuery = useQuery;
        this.reloadProps = reloadProps;
        this.withLabel = withLabel;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("type")
    public Optional<String> getType() {
        return type;
    }

    /**
     * @return When building <code>configuredProps</code>, make sure to use this field as the key when setting the prop value
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return Value to use as an input label. In cases where <code>type</code> is &quot;app&quot;, should load the app via <code>getApp</code>, etc. and show <code>app.name</code> instead.
     */
    @JsonProperty("label")
    public Optional<String> getLabel() {
        return label;
    }

    /**
     * @return A description of the prop, shown to the user when configuring the component.
     */
    @JsonProperty("description")
    public Optional<String> getDescription() {
        return description;
    }

    /**
     * @return If true, this prop does not need to be specified.
     */
    @JsonProperty("optional")
    public Optional<Boolean> getOptional() {
        return optional;
    }

    /**
     * @return If true, this prop will be ignored.
     */
    @JsonProperty("disabled")
    public Optional<Boolean> getDisabled() {
        return disabled;
    }

    /**
     * @return If true, should not expose this prop to the user
     */
    @JsonProperty("hidden")
    public Optional<Boolean> getHidden() {
        return hidden;
    }

    /**
     * @return If true, call <code>configureComponent</code> for this prop to load remote options. It is safe, and preferred, given a returned list of { label: string; value: any } objects to set the prop value to { __lv: { label: string; value: any } }. This way, on load, you can access label for the value without necessarily reloading these options
     */
    @JsonProperty("remoteOptions")
    public Optional<Boolean> getRemoteOptions() {
        return remoteOptions;
    }

    /**
     * @return If true, calls to <code>configureComponent</code> for this prop support receiving a <code>query</code> parameter to filter remote options
     */
    @JsonProperty("useQuery")
    public Optional<Boolean> getUseQuery() {
        return useQuery;
    }

    /**
     * @return If true, after setting a value for this prop, a call to <code>reloadComponentProps</code> is required as the component has dynamic configurable props dependent on this one
     */
    @JsonProperty("reloadProps")
    public Optional<Boolean> getReloadProps() {
        return reloadProps;
    }

    /**
     * @return If true, you must save the configured prop value as a &quot;label-value&quot; object which should look like: { __lv: { label: string; value: any } } because the execution needs to access the label
     */
    @JsonProperty("withLabel")
    public Optional<Boolean> getWithLabel() {
        return withLabel;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConfigurablePropAny && equalTo((ConfigurablePropAny) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConfigurablePropAny other) {
        return type.equals(other.type)
                && name.equals(other.name)
                && label.equals(other.label)
                && description.equals(other.description)
                && optional.equals(other.optional)
                && disabled.equals(other.disabled)
                && hidden.equals(other.hidden)
                && remoteOptions.equals(other.remoteOptions)
                && useQuery.equals(other.useQuery)
                && reloadProps.equals(other.reloadProps)
                && withLabel.equals(other.withLabel);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.type,
                this.name,
                this.label,
                this.description,
                this.optional,
                this.disabled,
                this.hidden,
                this.remoteOptions,
                this.useQuery,
                this.reloadProps,
                this.withLabel);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> type = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> label = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Boolean> optional = Optional.empty();

        private Optional<Boolean> disabled = Optional.empty();

        private Optional<Boolean> hidden = Optional.empty();

        private Optional<Boolean> remoteOptions = Optional.empty();

        private Optional<Boolean> useQuery = Optional.empty();

        private Optional<Boolean> reloadProps = Optional.empty();

        private Optional<Boolean> withLabel = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ConfigurablePropAny other) {
            type(other.getType());
            name(other.getName());
            label(other.getLabel());
            description(other.getDescription());
            optional(other.getOptional());
            disabled(other.getDisabled());
            hidden(other.getHidden());
            remoteOptions(other.getRemoteOptions());
            useQuery(other.getUseQuery());
            reloadProps(other.getReloadProps());
            withLabel(other.getWithLabel());
            return this;
        }

        @JsonSetter(value = "type", nulls = Nulls.SKIP)
        public Builder type(Optional<String> type) {
            this.type = type;
            return this;
        }

        public Builder type(String type) {
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * <p>When building <code>configuredProps</code>, make sure to use this field as the key when setting the prop value</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>Value to use as an input label. In cases where <code>type</code> is &quot;app&quot;, should load the app via <code>getApp</code>, etc. and show <code>app.name</code> instead.</p>
         */
        @JsonSetter(value = "label", nulls = Nulls.SKIP)
        public Builder label(Optional<String> label) {
            this.label = label;
            return this;
        }

        public Builder label(String label) {
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * <p>A description of the prop, shown to the user when configuring the component.</p>
         */
        @JsonSetter(value = "description", nulls = Nulls.SKIP)
        public Builder description(Optional<String> description) {
            this.description = description;
            return this;
        }

        public Builder description(String description) {
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * <p>If true, this prop does not need to be specified.</p>
         */
        @JsonSetter(value = "optional", nulls = Nulls.SKIP)
        public Builder optional(Optional<Boolean> optional) {
            this.optional = optional;
            return this;
        }

        public Builder optional(Boolean optional) {
            this.optional = Optional.ofNullable(optional);
            return this;
        }

        /**
         * <p>If true, this prop will be ignored.</p>
         */
        @JsonSetter(value = "disabled", nulls = Nulls.SKIP)
        public Builder disabled(Optional<Boolean> disabled) {
            this.disabled = disabled;
            return this;
        }

        public Builder disabled(Boolean disabled) {
            this.disabled = Optional.ofNullable(disabled);
            return this;
        }

        /**
         * <p>If true, should not expose this prop to the user</p>
         */
        @JsonSetter(value = "hidden", nulls = Nulls.SKIP)
        public Builder hidden(Optional<Boolean> hidden) {
            this.hidden = hidden;
            return this;
        }

        public Builder hidden(Boolean hidden) {
            this.hidden = Optional.ofNullable(hidden);
            return this;
        }

        /**
         * <p>If true, call <code>configureComponent</code> for this prop to load remote options. It is safe, and preferred, given a returned list of { label: string; value: any } objects to set the prop value to { __lv: { label: string; value: any } }. This way, on load, you can access label for the value without necessarily reloading these options</p>
         */
        @JsonSetter(value = "remoteOptions", nulls = Nulls.SKIP)
        public Builder remoteOptions(Optional<Boolean> remoteOptions) {
            this.remoteOptions = remoteOptions;
            return this;
        }

        public Builder remoteOptions(Boolean remoteOptions) {
            this.remoteOptions = Optional.ofNullable(remoteOptions);
            return this;
        }

        /**
         * <p>If true, calls to <code>configureComponent</code> for this prop support receiving a <code>query</code> parameter to filter remote options</p>
         */
        @JsonSetter(value = "useQuery", nulls = Nulls.SKIP)
        public Builder useQuery(Optional<Boolean> useQuery) {
            this.useQuery = useQuery;
            return this;
        }

        public Builder useQuery(Boolean useQuery) {
            this.useQuery = Optional.ofNullable(useQuery);
            return this;
        }

        /**
         * <p>If true, after setting a value for this prop, a call to <code>reloadComponentProps</code> is required as the component has dynamic configurable props dependent on this one</p>
         */
        @JsonSetter(value = "reloadProps", nulls = Nulls.SKIP)
        public Builder reloadProps(Optional<Boolean> reloadProps) {
            this.reloadProps = reloadProps;
            return this;
        }

        public Builder reloadProps(Boolean reloadProps) {
            this.reloadProps = Optional.ofNullable(reloadProps);
            return this;
        }

        /**
         * <p>If true, you must save the configured prop value as a &quot;label-value&quot; object which should look like: { __lv: { label: string; value: any } } because the execution needs to access the label</p>
         */
        @JsonSetter(value = "withLabel", nulls = Nulls.SKIP)
        public Builder withLabel(Optional<Boolean> withLabel) {
            this.withLabel = withLabel;
            return this;
        }

        public Builder withLabel(Boolean withLabel) {
            this.withLabel = Optional.ofNullable(withLabel);
            return this;
        }

        public ConfigurablePropAny build() {
            return new ConfigurablePropAny(
                    type,
                    name,
                    label,
                    description,
                    optional,
                    disabled,
                    hidden,
                    remoteOptions,
                    useQuery,
                    reloadProps,
                    withLabel,
                    additionalProperties);
        }
    }
}
