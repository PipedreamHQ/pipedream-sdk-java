/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateOAuthTokenResponse.Builder.class)
public final class CreateOAuthTokenResponse {
    private final String accessToken;

    private final String tokenType;

    private final int expiresIn;

    private final Map<String, Object> additionalProperties;

    private CreateOAuthTokenResponse(
            String accessToken, String tokenType, int expiresIn, Map<String, Object> additionalProperties) {
        this.accessToken = accessToken;
        this.tokenType = tokenType;
        this.expiresIn = expiresIn;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("access_token")
    public String getAccessToken() {
        return accessToken;
    }

    @JsonProperty("token_type")
    public String getTokenType() {
        return tokenType;
    }

    @JsonProperty("expires_in")
    public int getExpiresIn() {
        return expiresIn;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateOAuthTokenResponse && equalTo((CreateOAuthTokenResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateOAuthTokenResponse other) {
        return accessToken.equals(other.accessToken)
                && tokenType.equals(other.tokenType)
                && expiresIn == other.expiresIn;
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.accessToken, this.tokenType, this.expiresIn);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static AccessTokenStage builder() {
        return new Builder();
    }

    public interface AccessTokenStage {
        TokenTypeStage accessToken(@NotNull String accessToken);

        Builder from(CreateOAuthTokenResponse other);
    }

    public interface TokenTypeStage {
        ExpiresInStage tokenType(@NotNull String tokenType);
    }

    public interface ExpiresInStage {
        _FinalStage expiresIn(int expiresIn);
    }

    public interface _FinalStage {
        CreateOAuthTokenResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements AccessTokenStage, TokenTypeStage, ExpiresInStage, _FinalStage {
        private String accessToken;

        private String tokenType;

        private int expiresIn;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateOAuthTokenResponse other) {
            accessToken(other.getAccessToken());
            tokenType(other.getTokenType());
            expiresIn(other.getExpiresIn());
            return this;
        }

        @java.lang.Override
        @JsonSetter("access_token")
        public TokenTypeStage accessToken(@NotNull String accessToken) {
            this.accessToken = Objects.requireNonNull(accessToken, "accessToken must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("token_type")
        public ExpiresInStage tokenType(@NotNull String tokenType) {
            this.tokenType = Objects.requireNonNull(tokenType, "tokenType must not be null");
            return this;
        }

        @java.lang.Override
        @JsonSetter("expires_in")
        public _FinalStage expiresIn(int expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        @java.lang.Override
        public CreateOAuthTokenResponse build() {
            return new CreateOAuthTokenResponse(accessToken, tokenType, expiresIn, additionalProperties);
        }
    }
}
