/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProjectInfoResponse.Builder.class)
public final class ProjectInfoResponse {
    private final List<ProjectInfoResponseAppsItem> apps;

    private final Map<String, Object> additionalProperties;

    private ProjectInfoResponse(List<ProjectInfoResponseAppsItem> apps, Map<String, Object> additionalProperties) {
        this.apps = apps;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("apps")
    public List<ProjectInfoResponseAppsItem> getApps() {
        return apps;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProjectInfoResponse && equalTo((ProjectInfoResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProjectInfoResponse other) {
        return apps.equals(other.apps);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.apps);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private List<ProjectInfoResponseAppsItem> apps = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProjectInfoResponse other) {
            apps(other.getApps());
            return this;
        }

        @JsonSetter(value = "apps", nulls = Nulls.SKIP)
        public Builder apps(List<ProjectInfoResponseAppsItem> apps) {
            this.apps.clear();
            this.apps.addAll(apps);
            return this;
        }

        public Builder addApps(ProjectInfoResponseAppsItem apps) {
            this.apps.add(apps);
            return this;
        }

        public Builder addAllApps(List<ProjectInfoResponseAppsItem> apps) {
            this.apps.addAll(apps);
            return this;
        }

        public ProjectInfoResponse build() {
            return new ProjectInfoResponse(apps, additionalProperties);
        }
    }
}
