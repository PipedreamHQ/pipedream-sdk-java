/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTokenResponse.Builder.class)
public final class CreateTokenResponse {
    private final String connectLinkUrl;

    private final OffsetDateTime expiresAt;

    private final String token;

    private final Map<String, Object> additionalProperties;

    private CreateTokenResponse(
            String connectLinkUrl, OffsetDateTime expiresAt, String token, Map<String, Object> additionalProperties) {
        this.connectLinkUrl = connectLinkUrl;
        this.expiresAt = expiresAt;
        this.token = token;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The Connect Link URL
     */
    @JsonProperty("connect_link_url")
    public String getConnectLinkUrl() {
        return connectLinkUrl;
    }

    /**
     * @return The expiration time of the token in ISO 8601 format
     */
    @JsonProperty("expires_at")
    public OffsetDateTime getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return The generated token
     */
    @JsonProperty("token")
    public String getToken() {
        return token;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTokenResponse && equalTo((CreateTokenResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTokenResponse other) {
        return connectLinkUrl.equals(other.connectLinkUrl)
                && expiresAt.equals(other.expiresAt)
                && token.equals(other.token);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.connectLinkUrl, this.expiresAt, this.token);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ConnectLinkUrlStage builder() {
        return new Builder();
    }

    public interface ConnectLinkUrlStage {
        /**
         * <p>The Connect Link URL</p>
         */
        ExpiresAtStage connectLinkUrl(@NotNull String connectLinkUrl);

        Builder from(CreateTokenResponse other);
    }

    public interface ExpiresAtStage {
        /**
         * <p>The expiration time of the token in ISO 8601 format</p>
         */
        TokenStage expiresAt(@NotNull OffsetDateTime expiresAt);
    }

    public interface TokenStage {
        /**
         * <p>The generated token</p>
         */
        _FinalStage token(@NotNull String token);
    }

    public interface _FinalStage {
        CreateTokenResponse build();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ConnectLinkUrlStage, ExpiresAtStage, TokenStage, _FinalStage {
        private String connectLinkUrl;

        private OffsetDateTime expiresAt;

        private String token;

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateTokenResponse other) {
            connectLinkUrl(other.getConnectLinkUrl());
            expiresAt(other.getExpiresAt());
            token(other.getToken());
            return this;
        }

        /**
         * <p>The Connect Link URL</p>
         * <p>The Connect Link URL</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("connect_link_url")
        public ExpiresAtStage connectLinkUrl(@NotNull String connectLinkUrl) {
            this.connectLinkUrl = Objects.requireNonNull(connectLinkUrl, "connectLinkUrl must not be null");
            return this;
        }

        /**
         * <p>The expiration time of the token in ISO 8601 format</p>
         * <p>The expiration time of the token in ISO 8601 format</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("expires_at")
        public TokenStage expiresAt(@NotNull OffsetDateTime expiresAt) {
            this.expiresAt = Objects.requireNonNull(expiresAt, "expiresAt must not be null");
            return this;
        }

        /**
         * <p>The generated token</p>
         * <p>The generated token</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("token")
        public _FinalStage token(@NotNull String token) {
            this.token = Objects.requireNonNull(token, "token must not be null");
            return this;
        }

        @java.lang.Override
        public CreateTokenResponse build() {
            return new CreateTokenResponse(connectLinkUrl, expiresAt, token, additionalProperties);
        }
    }
}
