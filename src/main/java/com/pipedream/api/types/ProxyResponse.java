/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProxyResponse.Builder.class)
public final class ProxyResponse {
    private final Optional<Integer> status;

    private final Optional<Map<String, Object>> headers;

    private final Optional<Object> body;

    private final Map<String, Object> additionalProperties;

    private ProxyResponse(
            Optional<Integer> status,
            Optional<Map<String, Object>> headers,
            Optional<Object> body,
            Map<String, Object> additionalProperties) {
        this.status = status;
        this.headers = headers;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return HTTP status code
     */
    @JsonProperty("status")
    public Optional<Integer> getStatus() {
        return status;
    }

    /**
     * @return Response headers
     */
    @JsonProperty("headers")
    public Optional<Map<String, Object>> getHeaders() {
        return headers;
    }

    @JsonProperty("body")
    public Optional<Object> getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProxyResponse && equalTo((ProxyResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProxyResponse other) {
        return status.equals(other.status) && headers.equals(other.headers) && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.status, this.headers, this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> status = Optional.empty();

        private Optional<Map<String, Object>> headers = Optional.empty();

        private Optional<Object> body = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ProxyResponse other) {
            status(other.getStatus());
            headers(other.getHeaders());
            body(other.getBody());
            return this;
        }

        /**
         * <p>HTTP status code</p>
         */
        @JsonSetter(value = "status", nulls = Nulls.SKIP)
        public Builder status(Optional<Integer> status) {
            this.status = status;
            return this;
        }

        public Builder status(Integer status) {
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * <p>Response headers</p>
         */
        @JsonSetter(value = "headers", nulls = Nulls.SKIP)
        public Builder headers(Optional<Map<String, Object>> headers) {
            this.headers = headers;
            return this;
        }

        public Builder headers(Map<String, Object> headers) {
            this.headers = Optional.ofNullable(headers);
            return this;
        }

        @JsonSetter(value = "body", nulls = Nulls.SKIP)
        public Builder body(Optional<Object> body) {
            this.body = body;
            return this;
        }

        public Builder body(Object body) {
            this.body = Optional.ofNullable(body);
            return this;
        }

        public ProxyResponse build() {
            return new ProxyResponse(status, headers, body, additionalProperties);
        }
    }
}
