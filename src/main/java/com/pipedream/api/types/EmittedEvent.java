/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = EmittedEvent.Builder.class)
public final class EmittedEvent {
    private final Map<String, Object> e;

    private final String k;

    private final int ts;

    private final String id;

    private final Map<String, Object> additionalProperties;

    private EmittedEvent(Map<String, Object> e, String k, int ts, String id, Map<String, Object> additionalProperties) {
        this.e = e;
        this.k = k;
        this.ts = ts;
        this.id = id;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The event's payload
     */
    @JsonProperty("e")
    public Map<String, Object> getE() {
        return e;
    }

    /**
     * @return The event's type (set to 'emit' currently)
     */
    @JsonProperty("k")
    public String getK() {
        return k;
    }

    /**
     * @return The event's timestamp in epoch milliseconds
     */
    @JsonProperty("ts")
    public int getTs() {
        return ts;
    }

    /**
     * @return The event's unique ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof EmittedEvent && equalTo((EmittedEvent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(EmittedEvent other) {
        return e.equals(other.e) && k.equals(other.k) && ts == other.ts && id.equals(other.id);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.e, this.k, this.ts, this.id);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static KStage builder() {
        return new Builder();
    }

    public interface KStage {
        /**
         * <p>The event's type (set to 'emit' currently)</p>
         */
        TsStage k(@NotNull String k);

        Builder from(EmittedEvent other);
    }

    public interface TsStage {
        /**
         * <p>The event's timestamp in epoch milliseconds</p>
         */
        IdStage ts(int ts);
    }

    public interface IdStage {
        /**
         * <p>The event's unique ID</p>
         */
        _FinalStage id(@NotNull String id);
    }

    public interface _FinalStage {
        EmittedEvent build();

        /**
         * <p>The event's payload</p>
         */
        _FinalStage e(Map<String, Object> e);

        _FinalStage putAllE(Map<String, Object> e);

        _FinalStage e(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements KStage, TsStage, IdStage, _FinalStage {
        private String k;

        private int ts;

        private String id;

        private Map<String, Object> e = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(EmittedEvent other) {
            e(other.getE());
            k(other.getK());
            ts(other.getTs());
            id(other.getId());
            return this;
        }

        /**
         * <p>The event's type (set to 'emit' currently)</p>
         * <p>The event's type (set to 'emit' currently)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("k")
        public TsStage k(@NotNull String k) {
            this.k = Objects.requireNonNull(k, "k must not be null");
            return this;
        }

        /**
         * <p>The event's timestamp in epoch milliseconds</p>
         * <p>The event's timestamp in epoch milliseconds</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("ts")
        public IdStage ts(int ts) {
            this.ts = ts;
            return this;
        }

        /**
         * <p>The event's unique ID</p>
         * <p>The event's unique ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public _FinalStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The event's payload</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage e(String key, Object value) {
            this.e.put(key, value);
            return this;
        }

        /**
         * <p>The event's payload</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllE(Map<String, Object> e) {
            this.e.putAll(e);
            return this;
        }

        /**
         * <p>The event's payload</p>
         */
        @java.lang.Override
        @JsonSetter(value = "e", nulls = Nulls.SKIP)
        public _FinalStage e(Map<String, Object> e) {
            this.e.clear();
            this.e.putAll(e);
            return this;
        }

        @java.lang.Override
        public EmittedEvent build() {
            return new EmittedEvent(e, k, ts, id, additionalProperties);
        }
    }
}
