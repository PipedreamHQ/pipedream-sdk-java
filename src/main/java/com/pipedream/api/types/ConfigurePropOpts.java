/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ConfigurePropOpts.Builder.class)
public final class ConfigurePropOpts {
    private final String id;

    private final String externalUserId;

    private final String propName;

    private final Optional<Boolean> blocking;

    private final Optional<Map<String, Object>> configuredProps;

    private final Optional<String> dynamicPropsId;

    private final Optional<String> asyncHandle;

    private final Optional<Double> page;

    private final Optional<Map<String, Object>> prevContext;

    private final Optional<String> query;

    private final Map<String, Object> additionalProperties;

    private ConfigurePropOpts(
            String id,
            String externalUserId,
            String propName,
            Optional<Boolean> blocking,
            Optional<Map<String, Object>> configuredProps,
            Optional<String> dynamicPropsId,
            Optional<String> asyncHandle,
            Optional<Double> page,
            Optional<Map<String, Object>> prevContext,
            Optional<String> query,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalUserId = externalUserId;
        this.propName = propName;
        this.blocking = blocking;
        this.configuredProps = configuredProps;
        this.dynamicPropsId = dynamicPropsId;
        this.asyncHandle = asyncHandle;
        this.page = page;
        this.prevContext = prevContext;
        this.query = query;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The component ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The external user ID
     */
    @JsonProperty("external_user_id")
    public String getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return The name of the prop to configure
     */
    @JsonProperty("prop_name")
    public String getPropName() {
        return propName;
    }

    /**
     * @return Whether this operation should block until completion
     */
    @JsonProperty("blocking")
    public Optional<Boolean> getBlocking() {
        return blocking;
    }

    /**
     * @return The configured properties for the component
     */
    @JsonProperty("configured_props")
    public Optional<Map<String, Object>> getConfiguredProps() {
        return configuredProps;
    }

    /**
     * @return The ID for dynamic props
     */
    @JsonProperty("dynamic_props_id")
    public Optional<String> getDynamicPropsId() {
        return dynamicPropsId;
    }

    /**
     * @return Handle for async operations
     */
    @JsonProperty("async_handle")
    public Optional<String> getAsyncHandle() {
        return asyncHandle;
    }

    /**
     * @return Page number for paginated results
     */
    @JsonProperty("page")
    public Optional<Double> getPage() {
        return page;
    }

    /**
     * @return Previous context for pagination
     */
    @JsonProperty("prev_context")
    public Optional<Map<String, Object>> getPrevContext() {
        return prevContext;
    }

    /**
     * @return Search query for filtering options
     */
    @JsonProperty("query")
    public Optional<String> getQuery() {
        return query;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ConfigurePropOpts && equalTo((ConfigurePropOpts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ConfigurePropOpts other) {
        return id.equals(other.id)
                && externalUserId.equals(other.externalUserId)
                && propName.equals(other.propName)
                && blocking.equals(other.blocking)
                && configuredProps.equals(other.configuredProps)
                && dynamicPropsId.equals(other.dynamicPropsId)
                && asyncHandle.equals(other.asyncHandle)
                && page.equals(other.page)
                && prevContext.equals(other.prevContext)
                && query.equals(other.query);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.externalUserId,
                this.propName,
                this.blocking,
                this.configuredProps,
                this.dynamicPropsId,
                this.asyncHandle,
                this.page,
                this.prevContext,
                this.query);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The component ID</p>
         */
        ExternalUserIdStage id(@NotNull String id);

        Builder from(ConfigurePropOpts other);
    }

    public interface ExternalUserIdStage {
        /**
         * <p>The external user ID</p>
         */
        PropNameStage externalUserId(@NotNull String externalUserId);
    }

    public interface PropNameStage {
        /**
         * <p>The name of the prop to configure</p>
         */
        _FinalStage propName(@NotNull String propName);
    }

    public interface _FinalStage {
        ConfigurePropOpts build();

        /**
         * <p>Whether this operation should block until completion</p>
         */
        _FinalStage blocking(Optional<Boolean> blocking);

        _FinalStage blocking(Boolean blocking);

        /**
         * <p>The configured properties for the component</p>
         */
        _FinalStage configuredProps(Optional<Map<String, Object>> configuredProps);

        _FinalStage configuredProps(Map<String, Object> configuredProps);

        /**
         * <p>The ID for dynamic props</p>
         */
        _FinalStage dynamicPropsId(Optional<String> dynamicPropsId);

        _FinalStage dynamicPropsId(String dynamicPropsId);

        /**
         * <p>Handle for async operations</p>
         */
        _FinalStage asyncHandle(Optional<String> asyncHandle);

        _FinalStage asyncHandle(String asyncHandle);

        /**
         * <p>Page number for paginated results</p>
         */
        _FinalStage page(Optional<Double> page);

        _FinalStage page(Double page);

        /**
         * <p>Previous context for pagination</p>
         */
        _FinalStage prevContext(Optional<Map<String, Object>> prevContext);

        _FinalStage prevContext(Map<String, Object> prevContext);

        /**
         * <p>Search query for filtering options</p>
         */
        _FinalStage query(Optional<String> query);

        _FinalStage query(String query);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, ExternalUserIdStage, PropNameStage, _FinalStage {
        private String id;

        private String externalUserId;

        private String propName;

        private Optional<String> query = Optional.empty();

        private Optional<Map<String, Object>> prevContext = Optional.empty();

        private Optional<Double> page = Optional.empty();

        private Optional<String> asyncHandle = Optional.empty();

        private Optional<String> dynamicPropsId = Optional.empty();

        private Optional<Map<String, Object>> configuredProps = Optional.empty();

        private Optional<Boolean> blocking = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ConfigurePropOpts other) {
            id(other.getId());
            externalUserId(other.getExternalUserId());
            propName(other.getPropName());
            blocking(other.getBlocking());
            configuredProps(other.getConfiguredProps());
            dynamicPropsId(other.getDynamicPropsId());
            asyncHandle(other.getAsyncHandle());
            page(other.getPage());
            prevContext(other.getPrevContext());
            query(other.getQuery());
            return this;
        }

        /**
         * <p>The component ID</p>
         * <p>The component ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public ExternalUserIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The external user ID</p>
         * <p>The external user ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("external_user_id")
        public PropNameStage externalUserId(@NotNull String externalUserId) {
            this.externalUserId = Objects.requireNonNull(externalUserId, "externalUserId must not be null");
            return this;
        }

        /**
         * <p>The name of the prop to configure</p>
         * <p>The name of the prop to configure</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("prop_name")
        public _FinalStage propName(@NotNull String propName) {
            this.propName = Objects.requireNonNull(propName, "propName must not be null");
            return this;
        }

        /**
         * <p>Search query for filtering options</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage query(String query) {
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * <p>Search query for filtering options</p>
         */
        @java.lang.Override
        @JsonSetter(value = "query", nulls = Nulls.SKIP)
        public _FinalStage query(Optional<String> query) {
            this.query = query;
            return this;
        }

        /**
         * <p>Previous context for pagination</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage prevContext(Map<String, Object> prevContext) {
            this.prevContext = Optional.ofNullable(prevContext);
            return this;
        }

        /**
         * <p>Previous context for pagination</p>
         */
        @java.lang.Override
        @JsonSetter(value = "prev_context", nulls = Nulls.SKIP)
        public _FinalStage prevContext(Optional<Map<String, Object>> prevContext) {
            this.prevContext = prevContext;
            return this;
        }

        /**
         * <p>Page number for paginated results</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage page(Double page) {
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * <p>Page number for paginated results</p>
         */
        @java.lang.Override
        @JsonSetter(value = "page", nulls = Nulls.SKIP)
        public _FinalStage page(Optional<Double> page) {
            this.page = page;
            return this;
        }

        /**
         * <p>Handle for async operations</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage asyncHandle(String asyncHandle) {
            this.asyncHandle = Optional.ofNullable(asyncHandle);
            return this;
        }

        /**
         * <p>Handle for async operations</p>
         */
        @java.lang.Override
        @JsonSetter(value = "async_handle", nulls = Nulls.SKIP)
        public _FinalStage asyncHandle(Optional<String> asyncHandle) {
            this.asyncHandle = asyncHandle;
            return this;
        }

        /**
         * <p>The ID for dynamic props</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dynamicPropsId(String dynamicPropsId) {
            this.dynamicPropsId = Optional.ofNullable(dynamicPropsId);
            return this;
        }

        /**
         * <p>The ID for dynamic props</p>
         */
        @java.lang.Override
        @JsonSetter(value = "dynamic_props_id", nulls = Nulls.SKIP)
        public _FinalStage dynamicPropsId(Optional<String> dynamicPropsId) {
            this.dynamicPropsId = dynamicPropsId;
            return this;
        }

        /**
         * <p>The configured properties for the component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage configuredProps(Map<String, Object> configuredProps) {
            this.configuredProps = Optional.ofNullable(configuredProps);
            return this;
        }

        /**
         * <p>The configured properties for the component</p>
         */
        @java.lang.Override
        @JsonSetter(value = "configured_props", nulls = Nulls.SKIP)
        public _FinalStage configuredProps(Optional<Map<String, Object>> configuredProps) {
            this.configuredProps = configuredProps;
            return this;
        }

        /**
         * <p>Whether this operation should block until completion</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage blocking(Boolean blocking) {
            this.blocking = Optional.ofNullable(blocking);
            return this;
        }

        /**
         * <p>Whether this operation should block until completion</p>
         */
        @java.lang.Override
        @JsonSetter(value = "blocking", nulls = Nulls.SKIP)
        public _FinalStage blocking(Optional<Boolean> blocking) {
            this.blocking = blocking;
            return this;
        }

        @java.lang.Override
        public ConfigurePropOpts build() {
            return new ConfigurePropOpts(
                    id,
                    externalUserId,
                    propName,
                    blocking,
                    configuredProps,
                    dynamicPropsId,
                    asyncHandle,
                    page,
                    prevContext,
                    query,
                    additionalProperties);
        }
    }
}
