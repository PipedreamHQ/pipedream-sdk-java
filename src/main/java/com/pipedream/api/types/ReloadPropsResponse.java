/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ReloadPropsResponse.Builder.class)
public final class ReloadPropsResponse {
    private final Optional<List<ConfigurableProp>> configurableProps;

    private final Map<String, Object> additionalProperties;

    private ReloadPropsResponse(
            Optional<List<ConfigurableProp>> configurableProps, Map<String, Object> additionalProperties) {
        this.configurableProps = configurableProps;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The updated configurable properties
     */
    @JsonProperty("configurable_props")
    public Optional<List<ConfigurableProp>> getConfigurableProps() {
        return configurableProps;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ReloadPropsResponse && equalTo((ReloadPropsResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ReloadPropsResponse other) {
        return configurableProps.equals(other.configurableProps);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.configurableProps);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<List<ConfigurableProp>> configurableProps = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(ReloadPropsResponse other) {
            configurableProps(other.getConfigurableProps());
            return this;
        }

        /**
         * <p>The updated configurable properties</p>
         */
        @JsonSetter(value = "configurable_props", nulls = Nulls.SKIP)
        public Builder configurableProps(Optional<List<ConfigurableProp>> configurableProps) {
            this.configurableProps = configurableProps;
            return this;
        }

        public Builder configurableProps(List<ConfigurableProp> configurableProps) {
            this.configurableProps = Optional.ofNullable(configurableProps);
            return this;
        }

        public ReloadPropsResponse build() {
            return new ReloadPropsResponse(configurableProps, additionalProperties);
        }
    }
}
