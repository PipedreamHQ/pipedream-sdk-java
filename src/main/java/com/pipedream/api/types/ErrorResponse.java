/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ErrorResponse.Builder.class)
public final class ErrorResponse {
    private final String error;

    private final Optional<String> code;

    private final Optional<Map<String, Object>> details;

    private final Map<String, Object> additionalProperties;

    private ErrorResponse(
            String error,
            Optional<String> code,
            Optional<Map<String, Object>> details,
            Map<String, Object> additionalProperties) {
        this.error = error;
        this.code = code;
        this.details = details;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The error message
     */
    @JsonProperty("error")
    public String getError() {
        return error;
    }

    /**
     * @return The error code
     */
    @JsonProperty("code")
    public Optional<String> getCode() {
        return code;
    }

    /**
     * @return Additional error details
     */
    @JsonProperty("details")
    public Optional<Map<String, Object>> getDetails() {
        return details;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ErrorResponse && equalTo((ErrorResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ErrorResponse other) {
        return error.equals(other.error) && code.equals(other.code) && details.equals(other.details);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.error, this.code, this.details);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ErrorStage builder() {
        return new Builder();
    }

    public interface ErrorStage {
        /**
         * <p>The error message</p>
         */
        _FinalStage error(@NotNull String error);

        Builder from(ErrorResponse other);
    }

    public interface _FinalStage {
        ErrorResponse build();

        /**
         * <p>The error code</p>
         */
        _FinalStage code(Optional<String> code);

        _FinalStage code(String code);

        /**
         * <p>Additional error details</p>
         */
        _FinalStage details(Optional<Map<String, Object>> details);

        _FinalStage details(Map<String, Object> details);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ErrorStage, _FinalStage {
        private String error;

        private Optional<Map<String, Object>> details = Optional.empty();

        private Optional<String> code = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ErrorResponse other) {
            error(other.getError());
            code(other.getCode());
            details(other.getDetails());
            return this;
        }

        /**
         * <p>The error message</p>
         * <p>The error message</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("error")
        public _FinalStage error(@NotNull String error) {
            this.error = Objects.requireNonNull(error, "error must not be null");
            return this;
        }

        /**
         * <p>Additional error details</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage details(Map<String, Object> details) {
            this.details = Optional.ofNullable(details);
            return this;
        }

        /**
         * <p>Additional error details</p>
         */
        @java.lang.Override
        @JsonSetter(value = "details", nulls = Nulls.SKIP)
        public _FinalStage details(Optional<Map<String, Object>> details) {
            this.details = details;
            return this;
        }

        /**
         * <p>The error code</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage code(String code) {
            this.code = Optional.ofNullable(code);
            return this;
        }

        /**
         * <p>The error code</p>
         */
        @java.lang.Override
        @JsonSetter(value = "code", nulls = Nulls.SKIP)
        public _FinalStage code(Optional<String> code) {
            this.code = code;
            return this;
        }

        @java.lang.Override
        public ErrorResponse build() {
            return new ErrorResponse(error, code, details, additionalProperties);
        }
    }
}
