/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = PageInfo.Builder.class)
public final class PageInfo {
    private final Optional<Integer> count;

    private final Optional<Integer> totalCount;

    private final Optional<String> startCursor;

    private final Optional<String> endCursor;

    private final Map<String, Object> additionalProperties;

    private PageInfo(
            Optional<Integer> count,
            Optional<Integer> totalCount,
            Optional<String> startCursor,
            Optional<String> endCursor,
            Map<String, Object> additionalProperties) {
        this.count = count;
        this.totalCount = totalCount;
        this.startCursor = startCursor;
        this.endCursor = endCursor;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("count")
    public Optional<Integer> getCount() {
        return count;
    }

    @JsonProperty("total_count")
    public Optional<Integer> getTotalCount() {
        return totalCount;
    }

    @JsonProperty("start_cursor")
    public Optional<String> getStartCursor() {
        return startCursor;
    }

    @JsonProperty("end_cursor")
    public Optional<String> getEndCursor() {
        return endCursor;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof PageInfo && equalTo((PageInfo) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(PageInfo other) {
        return count.equals(other.count)
                && totalCount.equals(other.totalCount)
                && startCursor.equals(other.startCursor)
                && endCursor.equals(other.endCursor);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.count, this.totalCount, this.startCursor, this.endCursor);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Integer> count = Optional.empty();

        private Optional<Integer> totalCount = Optional.empty();

        private Optional<String> startCursor = Optional.empty();

        private Optional<String> endCursor = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(PageInfo other) {
            count(other.getCount());
            totalCount(other.getTotalCount());
            startCursor(other.getStartCursor());
            endCursor(other.getEndCursor());
            return this;
        }

        @JsonSetter(value = "count", nulls = Nulls.SKIP)
        public Builder count(Optional<Integer> count) {
            this.count = count;
            return this;
        }

        public Builder count(Integer count) {
            this.count = Optional.ofNullable(count);
            return this;
        }

        @JsonSetter(value = "total_count", nulls = Nulls.SKIP)
        public Builder totalCount(Optional<Integer> totalCount) {
            this.totalCount = totalCount;
            return this;
        }

        public Builder totalCount(Integer totalCount) {
            this.totalCount = Optional.ofNullable(totalCount);
            return this;
        }

        @JsonSetter(value = "start_cursor", nulls = Nulls.SKIP)
        public Builder startCursor(Optional<String> startCursor) {
            this.startCursor = startCursor;
            return this;
        }

        public Builder startCursor(String startCursor) {
            this.startCursor = Optional.ofNullable(startCursor);
            return this;
        }

        @JsonSetter(value = "end_cursor", nulls = Nulls.SKIP)
        public Builder endCursor(Optional<String> endCursor) {
            this.endCursor = endCursor;
            return this;
        }

        public Builder endCursor(String endCursor) {
            this.endCursor = Optional.ofNullable(endCursor);
            return this;
        }

        public PageInfo build() {
            return new PageInfo(count, totalCount, startCursor, endCursor, additionalProperties);
        }
    }
}
