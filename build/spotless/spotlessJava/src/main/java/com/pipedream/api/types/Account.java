/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = Account.Builder.class)
public final class Account {
    private final Optional<String> id;

    private final Optional<String> name;

    private final Optional<String> externalId;

    private final Optional<Boolean> healthy;

    private final Optional<Boolean> dead;

    private final Optional<App> app;

    private final Optional<OffsetDateTime> createdAt;

    private final Optional<OffsetDateTime> updatedAt;

    private final Optional<Map<String, Object>> credentials;

    private final Optional<OffsetDateTime> expiresAt;

    private final Optional<String> error;

    private final Optional<OffsetDateTime> lastRefreshedAt;

    private final Optional<OffsetDateTime> nextRefreshAt;

    private final Map<String, Object> additionalProperties;

    private Account(
            Optional<String> id,
            Optional<String> name,
            Optional<String> externalId,
            Optional<Boolean> healthy,
            Optional<Boolean> dead,
            Optional<App> app,
            Optional<OffsetDateTime> createdAt,
            Optional<OffsetDateTime> updatedAt,
            Optional<Map<String, Object>> credentials,
            Optional<OffsetDateTime> expiresAt,
            Optional<String> error,
            Optional<OffsetDateTime> lastRefreshedAt,
            Optional<OffsetDateTime> nextRefreshAt,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.name = name;
        this.externalId = externalId;
        this.healthy = healthy;
        this.dead = dead;
        this.app = app;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.credentials = credentials;
        this.expiresAt = expiresAt;
        this.error = error;
        this.lastRefreshedAt = lastRefreshedAt;
        this.nextRefreshAt = nextRefreshAt;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID of the account.
     */
    @JsonProperty("id")
    public Optional<String> getId() {
        return id;
    }

    /**
     * @return The custom name of the account if set.
     */
    @JsonProperty("name")
    public Optional<String> getName() {
        return name;
    }

    /**
     * @return The external ID associated with the account.
     */
    @JsonProperty("external_id")
    public Optional<String> getExternalId() {
        return externalId;
    }

    /**
     * @return Indicates if the account is healthy. Pipedream will periodically retry token refresh and test requests for unhealthy accounts
     */
    @JsonProperty("healthy")
    public Optional<Boolean> getHealthy() {
        return healthy;
    }

    /**
     * @return Indicates if the account is no longer active
     */
    @JsonProperty("dead")
    public Optional<Boolean> getDead() {
        return dead;
    }

    @JsonProperty("app")
    public Optional<App> getApp() {
        return app;
    }

    /**
     * @return The date and time the account was created, an ISO 8601 formatted string
     */
    @JsonProperty("created_at")
    public Optional<OffsetDateTime> getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The date and time the account was last updated, an ISO 8601 formatted string
     */
    @JsonProperty("updated_at")
    public Optional<OffsetDateTime> getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The credentials associated with the account, if the <code>include_credentials</code> parameter was set to true in the request
     */
    @JsonProperty("credentials")
    public Optional<Map<String, Object>> getCredentials() {
        return credentials;
    }

    /**
     * @return The date and time the account's credentials expiration, an ISO 8601 formatted string
     */
    @JsonProperty("expires_at")
    public Optional<OffsetDateTime> getExpiresAt() {
        return expiresAt;
    }

    /**
     * @return The error message if the account is unhealthy or dead, null otherwise
     */
    @JsonProperty("error")
    public Optional<String> getError() {
        return error;
    }

    /**
     * @return The date and time the account was last refreshed, an ISO 8601 formatted string
     */
    @JsonProperty("last_refreshed_at")
    public Optional<OffsetDateTime> getLastRefreshedAt() {
        return lastRefreshedAt;
    }

    /**
     * @return The date and time the account will next be refreshed, an ISO 8601 formatted string
     */
    @JsonProperty("next_refresh_at")
    public Optional<OffsetDateTime> getNextRefreshAt() {
        return nextRefreshAt;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof Account && equalTo((Account) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(Account other) {
        return id.equals(other.id)
                && name.equals(other.name)
                && externalId.equals(other.externalId)
                && healthy.equals(other.healthy)
                && dead.equals(other.dead)
                && app.equals(other.app)
                && createdAt.equals(other.createdAt)
                && updatedAt.equals(other.updatedAt)
                && credentials.equals(other.credentials)
                && expiresAt.equals(other.expiresAt)
                && error.equals(other.error)
                && lastRefreshedAt.equals(other.lastRefreshedAt)
                && nextRefreshAt.equals(other.nextRefreshAt);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.name,
                this.externalId,
                this.healthy,
                this.dead,
                this.app,
                this.createdAt,
                this.updatedAt,
                this.credentials,
                this.expiresAt,
                this.error,
                this.lastRefreshedAt,
                this.nextRefreshAt);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> externalId = Optional.empty();

        private Optional<Boolean> healthy = Optional.empty();

        private Optional<Boolean> dead = Optional.empty();

        private Optional<App> app = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<Map<String, Object>> credentials = Optional.empty();

        private Optional<OffsetDateTime> expiresAt = Optional.empty();

        private Optional<String> error = Optional.empty();

        private Optional<OffsetDateTime> lastRefreshedAt = Optional.empty();

        private Optional<OffsetDateTime> nextRefreshAt = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(Account other) {
            id(other.getId());
            name(other.getName());
            externalId(other.getExternalId());
            healthy(other.getHealthy());
            dead(other.getDead());
            app(other.getApp());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            credentials(other.getCredentials());
            expiresAt(other.getExpiresAt());
            error(other.getError());
            lastRefreshedAt(other.getLastRefreshedAt());
            nextRefreshAt(other.getNextRefreshAt());
            return this;
        }

        /**
         * <p>The unique ID of the account.</p>
         */
        @JsonSetter(value = "id", nulls = Nulls.SKIP)
        public Builder id(Optional<String> id) {
            this.id = id;
            return this;
        }

        public Builder id(String id) {
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * <p>The custom name of the account if set.</p>
         */
        @JsonSetter(value = "name", nulls = Nulls.SKIP)
        public Builder name(Optional<String> name) {
            this.name = name;
            return this;
        }

        public Builder name(String name) {
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * <p>The external ID associated with the account.</p>
         */
        @JsonSetter(value = "external_id", nulls = Nulls.SKIP)
        public Builder externalId(Optional<String> externalId) {
            this.externalId = externalId;
            return this;
        }

        public Builder externalId(String externalId) {
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * <p>Indicates if the account is healthy. Pipedream will periodically retry token refresh and test requests for unhealthy accounts</p>
         */
        @JsonSetter(value = "healthy", nulls = Nulls.SKIP)
        public Builder healthy(Optional<Boolean> healthy) {
            this.healthy = healthy;
            return this;
        }

        public Builder healthy(Boolean healthy) {
            this.healthy = Optional.ofNullable(healthy);
            return this;
        }

        /**
         * <p>Indicates if the account is no longer active</p>
         */
        @JsonSetter(value = "dead", nulls = Nulls.SKIP)
        public Builder dead(Optional<Boolean> dead) {
            this.dead = dead;
            return this;
        }

        public Builder dead(Boolean dead) {
            this.dead = Optional.ofNullable(dead);
            return this;
        }

        @JsonSetter(value = "app", nulls = Nulls.SKIP)
        public Builder app(Optional<App> app) {
            this.app = app;
            return this;
        }

        public Builder app(App app) {
            this.app = Optional.ofNullable(app);
            return this;
        }

        /**
         * <p>The date and time the account was created, an ISO 8601 formatted string</p>
         */
        @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * <p>The date and time the account was last updated, an ISO 8601 formatted string</p>
         */
        @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * <p>The credentials associated with the account, if the <code>include_credentials</code> parameter was set to true in the request</p>
         */
        @JsonSetter(value = "credentials", nulls = Nulls.SKIP)
        public Builder credentials(Optional<Map<String, Object>> credentials) {
            this.credentials = credentials;
            return this;
        }

        public Builder credentials(Map<String, Object> credentials) {
            this.credentials = Optional.ofNullable(credentials);
            return this;
        }

        /**
         * <p>The date and time the account's credentials expiration, an ISO 8601 formatted string</p>
         */
        @JsonSetter(value = "expires_at", nulls = Nulls.SKIP)
        public Builder expiresAt(Optional<OffsetDateTime> expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        public Builder expiresAt(OffsetDateTime expiresAt) {
            this.expiresAt = Optional.ofNullable(expiresAt);
            return this;
        }

        /**
         * <p>The error message if the account is unhealthy or dead, null otherwise</p>
         */
        @JsonSetter(value = "error", nulls = Nulls.SKIP)
        public Builder error(Optional<String> error) {
            this.error = error;
            return this;
        }

        public Builder error(String error) {
            this.error = Optional.ofNullable(error);
            return this;
        }

        /**
         * <p>The date and time the account was last refreshed, an ISO 8601 formatted string</p>
         */
        @JsonSetter(value = "last_refreshed_at", nulls = Nulls.SKIP)
        public Builder lastRefreshedAt(Optional<OffsetDateTime> lastRefreshedAt) {
            this.lastRefreshedAt = lastRefreshedAt;
            return this;
        }

        public Builder lastRefreshedAt(OffsetDateTime lastRefreshedAt) {
            this.lastRefreshedAt = Optional.ofNullable(lastRefreshedAt);
            return this;
        }

        /**
         * <p>The date and time the account will next be refreshed, an ISO 8601 formatted string</p>
         */
        @JsonSetter(value = "next_refresh_at", nulls = Nulls.SKIP)
        public Builder nextRefreshAt(Optional<OffsetDateTime> nextRefreshAt) {
            this.nextRefreshAt = nextRefreshAt;
            return this;
        }

        public Builder nextRefreshAt(OffsetDateTime nextRefreshAt) {
            this.nextRefreshAt = Optional.ofNullable(nextRefreshAt);
            return this;
        }

        public Account build() {
            return new Account(
                    id,
                    name,
                    externalId,
                    healthy,
                    dead,
                    app,
                    createdAt,
                    updatedAt,
                    credentials,
                    expiresAt,
                    error,
                    lastRefreshedAt,
                    nextRefreshAt,
                    additionalProperties);
        }
    }
}
