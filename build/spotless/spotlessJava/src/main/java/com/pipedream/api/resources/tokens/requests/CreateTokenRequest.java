/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.tokens.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = CreateTokenRequest.Builder.class)
public final class CreateTokenRequest {
    private final Optional<List<String>> allowedOrigins;

    private final Optional<String> errorRedirectUri;

    private final String externalUserId;

    private final String projectId;

    private final Optional<String> successRedirectUri;

    private final Optional<String> webhookUri;

    private final Map<String, Object> additionalProperties;

    private CreateTokenRequest(
            Optional<List<String>> allowedOrigins,
            Optional<String> errorRedirectUri,
            String externalUserId,
            String projectId,
            Optional<String> successRedirectUri,
            Optional<String> webhookUri,
            Map<String, Object> additionalProperties) {
        this.allowedOrigins = allowedOrigins;
        this.errorRedirectUri = errorRedirectUri;
        this.externalUserId = externalUserId;
        this.projectId = projectId;
        this.successRedirectUri = successRedirectUri;
        this.webhookUri = webhookUri;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return List of allowed origins for CORS
     */
    @JsonProperty("allowed_origins")
    public Optional<List<String>> getAllowedOrigins() {
        return allowedOrigins;
    }

    /**
     * @return URI to redirect to on error
     */
    @JsonProperty("error_redirect_uri")
    public Optional<String> getErrorRedirectUri() {
        return errorRedirectUri;
    }

    /**
     * @return Your end user ID, for whom you're creating the token
     */
    @JsonProperty("external_user_id")
    public String getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return The ID of the project
     */
    @JsonProperty("project_id")
    public String getProjectId() {
        return projectId;
    }

    /**
     * @return URI to redirect to on success
     */
    @JsonProperty("success_redirect_uri")
    public Optional<String> getSuccessRedirectUri() {
        return successRedirectUri;
    }

    /**
     * @return Webhook URI for notifications
     */
    @JsonProperty("webhook_uri")
    public Optional<String> getWebhookUri() {
        return webhookUri;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof CreateTokenRequest && equalTo((CreateTokenRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(CreateTokenRequest other) {
        return allowedOrigins.equals(other.allowedOrigins)
                && errorRedirectUri.equals(other.errorRedirectUri)
                && externalUserId.equals(other.externalUserId)
                && projectId.equals(other.projectId)
                && successRedirectUri.equals(other.successRedirectUri)
                && webhookUri.equals(other.webhookUri);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.allowedOrigins,
                this.errorRedirectUri,
                this.externalUserId,
                this.projectId,
                this.successRedirectUri,
                this.webhookUri);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExternalUserIdStage builder() {
        return new Builder();
    }

    public interface ExternalUserIdStage {
        /**
         * <p>Your end user ID, for whom you're creating the token</p>
         */
        ProjectIdStage externalUserId(@NotNull String externalUserId);

        Builder from(CreateTokenRequest other);
    }

    public interface ProjectIdStage {
        /**
         * <p>The ID of the project</p>
         */
        _FinalStage projectId(@NotNull String projectId);
    }

    public interface _FinalStage {
        CreateTokenRequest build();

        /**
         * <p>List of allowed origins for CORS</p>
         */
        _FinalStage allowedOrigins(Optional<List<String>> allowedOrigins);

        _FinalStage allowedOrigins(List<String> allowedOrigins);

        /**
         * <p>URI to redirect to on error</p>
         */
        _FinalStage errorRedirectUri(Optional<String> errorRedirectUri);

        _FinalStage errorRedirectUri(String errorRedirectUri);

        /**
         * <p>URI to redirect to on success</p>
         */
        _FinalStage successRedirectUri(Optional<String> successRedirectUri);

        _FinalStage successRedirectUri(String successRedirectUri);

        /**
         * <p>Webhook URI for notifications</p>
         */
        _FinalStage webhookUri(Optional<String> webhookUri);

        _FinalStage webhookUri(String webhookUri);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExternalUserIdStage, ProjectIdStage, _FinalStage {
        private String externalUserId;

        private String projectId;

        private Optional<String> webhookUri = Optional.empty();

        private Optional<String> successRedirectUri = Optional.empty();

        private Optional<String> errorRedirectUri = Optional.empty();

        private Optional<List<String>> allowedOrigins = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(CreateTokenRequest other) {
            allowedOrigins(other.getAllowedOrigins());
            errorRedirectUri(other.getErrorRedirectUri());
            externalUserId(other.getExternalUserId());
            projectId(other.getProjectId());
            successRedirectUri(other.getSuccessRedirectUri());
            webhookUri(other.getWebhookUri());
            return this;
        }

        /**
         * <p>Your end user ID, for whom you're creating the token</p>
         * <p>Your end user ID, for whom you're creating the token</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("external_user_id")
        public ProjectIdStage externalUserId(@NotNull String externalUserId) {
            this.externalUserId = Objects.requireNonNull(externalUserId, "externalUserId must not be null");
            return this;
        }

        /**
         * <p>The ID of the project</p>
         * <p>The ID of the project</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("project_id")
        public _FinalStage projectId(@NotNull String projectId) {
            this.projectId = Objects.requireNonNull(projectId, "projectId must not be null");
            return this;
        }

        /**
         * <p>Webhook URI for notifications</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage webhookUri(String webhookUri) {
            this.webhookUri = Optional.ofNullable(webhookUri);
            return this;
        }

        /**
         * <p>Webhook URI for notifications</p>
         */
        @java.lang.Override
        @JsonSetter(value = "webhook_uri", nulls = Nulls.SKIP)
        public _FinalStage webhookUri(Optional<String> webhookUri) {
            this.webhookUri = webhookUri;
            return this;
        }

        /**
         * <p>URI to redirect to on success</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage successRedirectUri(String successRedirectUri) {
            this.successRedirectUri = Optional.ofNullable(successRedirectUri);
            return this;
        }

        /**
         * <p>URI to redirect to on success</p>
         */
        @java.lang.Override
        @JsonSetter(value = "success_redirect_uri", nulls = Nulls.SKIP)
        public _FinalStage successRedirectUri(Optional<String> successRedirectUri) {
            this.successRedirectUri = successRedirectUri;
            return this;
        }

        /**
         * <p>URI to redirect to on error</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage errorRedirectUri(String errorRedirectUri) {
            this.errorRedirectUri = Optional.ofNullable(errorRedirectUri);
            return this;
        }

        /**
         * <p>URI to redirect to on error</p>
         */
        @java.lang.Override
        @JsonSetter(value = "error_redirect_uri", nulls = Nulls.SKIP)
        public _FinalStage errorRedirectUri(Optional<String> errorRedirectUri) {
            this.errorRedirectUri = errorRedirectUri;
            return this;
        }

        /**
         * <p>List of allowed origins for CORS</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage allowedOrigins(List<String> allowedOrigins) {
            this.allowedOrigins = Optional.ofNullable(allowedOrigins);
            return this;
        }

        /**
         * <p>List of allowed origins for CORS</p>
         */
        @java.lang.Override
        @JsonSetter(value = "allowed_origins", nulls = Nulls.SKIP)
        public _FinalStage allowedOrigins(Optional<List<String>> allowedOrigins) {
            this.allowedOrigins = allowedOrigins;
            return this;
        }

        @java.lang.Override
        public CreateTokenRequest build() {
            return new CreateTokenRequest(
                    allowedOrigins,
                    errorRedirectUri,
                    externalUserId,
                    projectId,
                    successRedirectUri,
                    webhookUri,
                    additionalProperties);
        }
    }
}
