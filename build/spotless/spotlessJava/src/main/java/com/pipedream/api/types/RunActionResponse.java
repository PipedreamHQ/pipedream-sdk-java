/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = RunActionResponse.Builder.class)
public final class RunActionResponse {
    private final Optional<Object> exports;

    private final Optional<Object> os;

    private final Optional<Object> ret;

    private final Optional<String> stashId;

    private final Map<String, Object> additionalProperties;

    private RunActionResponse(
            Optional<Object> exports,
            Optional<Object> os,
            Optional<Object> ret,
            Optional<String> stashId,
            Map<String, Object> additionalProperties) {
        this.exports = exports;
        this.os = os;
        this.ret = ret;
        this.stashId = stashId;
        this.additionalProperties = additionalProperties;
    }

    @JsonProperty("exports")
    public Optional<Object> getExports() {
        return exports;
    }

    @JsonProperty("os")
    public Optional<Object> getOs() {
        return os;
    }

    @JsonProperty("ret")
    public Optional<Object> getRet() {
        return ret;
    }

    /**
     * @return The ID of the File Stash that was used to sync the action's /tmp directory
     */
    @JsonProperty("stash_id")
    public Optional<String> getStashId() {
        return stashId;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof RunActionResponse && equalTo((RunActionResponse) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(RunActionResponse other) {
        return exports.equals(other.exports)
                && os.equals(other.os)
                && ret.equals(other.ret)
                && stashId.equals(other.stashId);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.exports, this.os, this.ret, this.stashId);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<Object> exports = Optional.empty();

        private Optional<Object> os = Optional.empty();

        private Optional<Object> ret = Optional.empty();

        private Optional<String> stashId = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(RunActionResponse other) {
            exports(other.getExports());
            os(other.getOs());
            ret(other.getRet());
            stashId(other.getStashId());
            return this;
        }

        @JsonSetter(value = "exports", nulls = Nulls.SKIP)
        public Builder exports(Optional<Object> exports) {
            this.exports = exports;
            return this;
        }

        public Builder exports(Object exports) {
            this.exports = Optional.ofNullable(exports);
            return this;
        }

        @JsonSetter(value = "os", nulls = Nulls.SKIP)
        public Builder os(Optional<Object> os) {
            this.os = os;
            return this;
        }

        public Builder os(Object os) {
            this.os = Optional.ofNullable(os);
            return this;
        }

        @JsonSetter(value = "ret", nulls = Nulls.SKIP)
        public Builder ret(Optional<Object> ret) {
            this.ret = ret;
            return this;
        }

        public Builder ret(Object ret) {
            this.ret = Optional.ofNullable(ret);
            return this;
        }

        /**
         * <p>The ID of the File Stash that was used to sync the action's /tmp directory</p>
         */
        @JsonSetter(value = "stash_id", nulls = Nulls.SKIP)
        public Builder stashId(Optional<String> stashId) {
            this.stashId = stashId;
            return this;
        }

        public Builder stashId(String stashId) {
            this.stashId = Optional.ofNullable(stashId);
            return this;
        }

        public RunActionResponse build() {
            return new RunActionResponse(exports, os, ret, stashId, additionalProperties);
        }
    }
}
