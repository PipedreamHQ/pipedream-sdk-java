/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.deployedtriggers;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.MediaTypes;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.PipedreamApiApiException;
import com.pipedream.api.core.PipedreamApiException;
import com.pipedream.api.core.PipedreamApiHttpResponse;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersDeleteRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListEventsRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListWebhooksRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersListWorkflowsRequest;
import com.pipedream.api.resources.deployedtriggers.requests.DeployedTriggersRetrieveRequest;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerOpts;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerWebhooksOpts;
import com.pipedream.api.resources.deployedtriggers.requests.UpdateTriggerWorkflowsOpts;
import com.pipedream.api.types.DeployedComponent;
import com.pipedream.api.types.EmittedEvent;
import com.pipedream.api.types.GetTriggerEventsResponse;
import com.pipedream.api.types.GetTriggerResponse;
import com.pipedream.api.types.GetTriggerWebhooksResponse;
import com.pipedream.api.types.GetTriggerWorkflowsResponse;
import com.pipedream.api.types.GetTriggersResponse;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import okhttp3.ResponseBody;

public class RawDeployedTriggersClient {
    protected final ClientOptions clientOptions;

    public RawDeployedTriggersClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public PipedreamApiHttpResponse<SyncPagingIterable<DeployedComponent>> list(DeployedTriggersListRequest request) {
        return list(request, null);
    }

    public PipedreamApiHttpResponse<SyncPagingIterable<DeployedComponent>> list(
            DeployedTriggersListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers");
        if (request.getAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "after", request.getAfter().get(), false);
        }
        if (request.getBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "before", request.getBefore().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                GetTriggersResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggersResponse.class);
                Optional<String> startingAfter = parsedResponse.getPageInfo().getEndCursor();
                DeployedTriggersListRequest nextRequest = DeployedTriggersListRequest.builder()
                        .from(request)
                        .after(startingAfter)
                        .build();
                List<DeployedComponent> result = parsedResponse.getData();
                return new PipedreamApiHttpResponse<>(
                        new SyncPagingIterable<DeployedComponent>(
                                startingAfter.isPresent(), result, () -> list(nextRequest, requestOptions)
                                        .body()),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<DeployedComponent> retrieve(
            String triggerId, DeployedTriggersRetrieveRequest request) {
        return retrieve(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<DeployedComponent> retrieve(
            String triggerId, DeployedTriggersRetrieveRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                GetTriggerResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerResponse.class);
                return new PipedreamApiHttpResponse<>(parsedResponse.getData(), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<DeployedComponent> update(String triggerId, UpdateTriggerOpts request) {
        return update(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<DeployedComponent> update(
            String triggerId, UpdateTriggerOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Map<String, Object> properties = new HashMap<>();
        if (request.getActive().isPresent()) {
            properties.put("active", request.getActive());
        }
        if (request.getConfiguredProps().isPresent()) {
            properties.put("configured_props", request.getConfiguredProps());
        }
        if (request.getName().isPresent()) {
            properties.put("name", request.getName());
        }
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                GetTriggerResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerResponse.class);
                return new PipedreamApiHttpResponse<>(parsedResponse.getData(), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<Void> delete(String triggerId, DeployedTriggersDeleteRequest request) {
        return delete(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<Void> delete(
            String triggerId, DeployedTriggersDeleteRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId);
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        if (request.getIgnoreHookErrors().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "ignore_hook_errors", request.getIgnoreHookErrors().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("DELETE", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)));
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(null, response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<List<EmittedEvent>> listEvents(
            String triggerId, DeployedTriggersListEventsRequest request) {
        return listEvents(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<List<EmittedEvent>> listEvents(
            String triggerId, DeployedTriggersListEventsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("events");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        if (request.getN().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "n", request.getN().get(), false);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                GetTriggerEventsResponse parsedResponse =
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerEventsResponse.class);
                return new PipedreamApiHttpResponse<>(parsedResponse.getData(), response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<GetTriggerWorkflowsResponse> listWorkflows(
            String triggerId, DeployedTriggersListWorkflowsRequest request) {
        return listWorkflows(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<GetTriggerWorkflowsResponse> listWorkflows(
            String triggerId, DeployedTriggersListWorkflowsRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("pipelines");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerWorkflowsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<GetTriggerWorkflowsResponse> updateWorkflows(
            String triggerId, UpdateTriggerWorkflowsOpts request) {
        return updateWorkflows(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<GetTriggerWorkflowsResponse> updateWorkflows(
            String triggerId, UpdateTriggerWorkflowsOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("pipelines");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Map<String, Object> properties = new HashMap<>();
        properties.put("workflow_ids", request.getWorkflowIds());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerWorkflowsResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<GetTriggerWebhooksResponse> listWebhooks(
            String triggerId, DeployedTriggersListWebhooksRequest request) {
        return listWebhooks(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<GetTriggerWebhooksResponse> listWebhooks(
            String triggerId, DeployedTriggersListWebhooksRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("webhooks");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerWebhooksResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }

    public PipedreamApiHttpResponse<GetTriggerWebhooksResponse> updateWebhooks(
            String triggerId, UpdateTriggerWebhooksOpts request) {
        return updateWebhooks(triggerId, request, null);
    }

    public PipedreamApiHttpResponse<GetTriggerWebhooksResponse> updateWebhooks(
            String triggerId, UpdateTriggerWebhooksOpts request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect")
                .addPathSegment(clientOptions.projectId())
                .addPathSegments("deployed-triggers")
                .addPathSegment(triggerId)
                .addPathSegments("webhooks");
        QueryStringMapper.addQueryParameter(httpUrl, "external_user_id", request.getExternalUserId(), false);
        Map<String, Object> properties = new HashMap<>();
        properties.put("webhook_urls", request.getWebhookUrls());
        RequestBody body;
        try {
            body = RequestBody.create(
                    ObjectMappers.JSON_MAPPER.writeValueAsBytes(properties), MediaTypes.APPLICATION_JSON);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("PUT", body)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Content-Type", "application/json")
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        try (Response response = client.newCall(okhttpRequest).execute()) {
            ResponseBody responseBody = response.body();
            if (response.isSuccessful()) {
                return new PipedreamApiHttpResponse<>(
                        ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetTriggerWebhooksResponse.class),
                        response);
            }
            String responseBodyString = responseBody != null ? responseBody.string() : "{}";
            throw new PipedreamApiApiException(
                    "Error with status code " + response.code(),
                    response.code(),
                    ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                    response);
        } catch (IOException e) {
            throw new PipedreamApiException("Network error executing HTTP request", e);
        }
    }
}
