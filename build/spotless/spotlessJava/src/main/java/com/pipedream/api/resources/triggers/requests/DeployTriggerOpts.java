/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.triggers.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeployTriggerOpts.Builder.class)
public final class DeployTriggerOpts {
    private final String id;

    private final String externalUserId;

    private final Optional<Map<String, Object>> configuredProps;

    private final Optional<String> dynamicPropsId;

    private final Optional<String> webhookUrl;

    private final Map<String, Object> additionalProperties;

    private DeployTriggerOpts(
            String id,
            String externalUserId,
            Optional<Map<String, Object>> configuredProps,
            Optional<String> dynamicPropsId,
            Optional<String> webhookUrl,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.externalUserId = externalUserId;
        this.configuredProps = configuredProps;
        this.dynamicPropsId = dynamicPropsId;
        this.webhookUrl = webhookUrl;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The trigger component ID
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The external user ID
     */
    @JsonProperty("external_user_id")
    public String getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return The configured properties for the trigger
     */
    @JsonProperty("configured_props")
    public Optional<Map<String, Object>> getConfiguredProps() {
        return configuredProps;
    }

    /**
     * @return The ID for dynamic props
     */
    @JsonProperty("dynamic_props_id")
    public Optional<String> getDynamicPropsId() {
        return dynamicPropsId;
    }

    /**
     * @return Optional webhook URL to receive trigger events
     */
    @JsonProperty("webhook_url")
    public Optional<String> getWebhookUrl() {
        return webhookUrl;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeployTriggerOpts && equalTo((DeployTriggerOpts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeployTriggerOpts other) {
        return id.equals(other.id)
                && externalUserId.equals(other.externalUserId)
                && configuredProps.equals(other.configuredProps)
                && dynamicPropsId.equals(other.dynamicPropsId)
                && webhookUrl.equals(other.webhookUrl);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.id, this.externalUserId, this.configuredProps, this.dynamicPropsId, this.webhookUrl);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The trigger component ID</p>
         */
        ExternalUserIdStage id(@NotNull String id);

        Builder from(DeployTriggerOpts other);
    }

    public interface ExternalUserIdStage {
        /**
         * <p>The external user ID</p>
         */
        _FinalStage externalUserId(@NotNull String externalUserId);
    }

    public interface _FinalStage {
        DeployTriggerOpts build();

        /**
         * <p>The configured properties for the trigger</p>
         */
        _FinalStage configuredProps(Optional<Map<String, Object>> configuredProps);

        _FinalStage configuredProps(Map<String, Object> configuredProps);

        /**
         * <p>The ID for dynamic props</p>
         */
        _FinalStage dynamicPropsId(Optional<String> dynamicPropsId);

        _FinalStage dynamicPropsId(String dynamicPropsId);

        /**
         * <p>Optional webhook URL to receive trigger events</p>
         */
        _FinalStage webhookUrl(Optional<String> webhookUrl);

        _FinalStage webhookUrl(String webhookUrl);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements IdStage, ExternalUserIdStage, _FinalStage {
        private String id;

        private String externalUserId;

        private Optional<String> webhookUrl = Optional.empty();

        private Optional<String> dynamicPropsId = Optional.empty();

        private Optional<Map<String, Object>> configuredProps = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeployTriggerOpts other) {
            id(other.getId());
            externalUserId(other.getExternalUserId());
            configuredProps(other.getConfiguredProps());
            dynamicPropsId(other.getDynamicPropsId());
            webhookUrl(other.getWebhookUrl());
            return this;
        }

        /**
         * <p>The trigger component ID</p>
         * <p>The trigger component ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public ExternalUserIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The external user ID</p>
         * <p>The external user ID</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("external_user_id")
        public _FinalStage externalUserId(@NotNull String externalUserId) {
            this.externalUserId = Objects.requireNonNull(externalUserId, "externalUserId must not be null");
            return this;
        }

        /**
         * <p>Optional webhook URL to receive trigger events</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage webhookUrl(String webhookUrl) {
            this.webhookUrl = Optional.ofNullable(webhookUrl);
            return this;
        }

        /**
         * <p>Optional webhook URL to receive trigger events</p>
         */
        @java.lang.Override
        @JsonSetter(value = "webhook_url", nulls = Nulls.SKIP)
        public _FinalStage webhookUrl(Optional<String> webhookUrl) {
            this.webhookUrl = webhookUrl;
            return this;
        }

        /**
         * <p>The ID for dynamic props</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage dynamicPropsId(String dynamicPropsId) {
            this.dynamicPropsId = Optional.ofNullable(dynamicPropsId);
            return this;
        }

        /**
         * <p>The ID for dynamic props</p>
         */
        @java.lang.Override
        @JsonSetter(value = "dynamic_props_id", nulls = Nulls.SKIP)
        public _FinalStage dynamicPropsId(Optional<String> dynamicPropsId) {
            this.dynamicPropsId = dynamicPropsId;
            return this;
        }

        /**
         * <p>The configured properties for the trigger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage configuredProps(Map<String, Object> configuredProps) {
            this.configuredProps = Optional.ofNullable(configuredProps);
            return this;
        }

        /**
         * <p>The configured properties for the trigger</p>
         */
        @java.lang.Override
        @JsonSetter(value = "configured_props", nulls = Nulls.SKIP)
        public _FinalStage configuredProps(Optional<Map<String, Object>> configuredProps) {
            this.configuredProps = configuredProps;
            return this;
        }

        @java.lang.Override
        public DeployTriggerOpts build() {
            return new DeployTriggerOpts(
                    id, externalUserId, configuredProps, dynamicPropsId, webhookUrl, additionalProperties);
        }
    }
}
