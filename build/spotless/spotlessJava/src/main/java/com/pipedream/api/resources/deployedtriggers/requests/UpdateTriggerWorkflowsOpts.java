/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.deployedtriggers.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = UpdateTriggerWorkflowsOpts.Builder.class)
public final class UpdateTriggerWorkflowsOpts {
    private final String externalUserId;

    private final List<String> workflowIds;

    private final Map<String, Object> additionalProperties;

    private UpdateTriggerWorkflowsOpts(
            String externalUserId, List<String> workflowIds, Map<String, Object> additionalProperties) {
        this.externalUserId = externalUserId;
        this.workflowIds = workflowIds;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The external user ID who owns the trigger
     */
    @JsonProperty("external_user_id")
    public String getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return Array of workflow IDs to set
     */
    @JsonProperty("workflow_ids")
    public List<String> getWorkflowIds() {
        return workflowIds;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof UpdateTriggerWorkflowsOpts && equalTo((UpdateTriggerWorkflowsOpts) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(UpdateTriggerWorkflowsOpts other) {
        return externalUserId.equals(other.externalUserId) && workflowIds.equals(other.workflowIds);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.externalUserId, this.workflowIds);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExternalUserIdStage builder() {
        return new Builder();
    }

    public interface ExternalUserIdStage {
        /**
         * <p>The external user ID who owns the trigger</p>
         */
        _FinalStage externalUserId(@NotNull String externalUserId);

        Builder from(UpdateTriggerWorkflowsOpts other);
    }

    public interface _FinalStage {
        UpdateTriggerWorkflowsOpts build();

        /**
         * <p>Array of workflow IDs to set</p>
         */
        _FinalStage workflowIds(List<String> workflowIds);

        _FinalStage addWorkflowIds(String workflowIds);

        _FinalStage addAllWorkflowIds(List<String> workflowIds);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExternalUserIdStage, _FinalStage {
        private String externalUserId;

        private List<String> workflowIds = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(UpdateTriggerWorkflowsOpts other) {
            externalUserId(other.getExternalUserId());
            workflowIds(other.getWorkflowIds());
            return this;
        }

        /**
         * <p>The external user ID who owns the trigger</p>
         * <p>The external user ID who owns the trigger</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("external_user_id")
        public _FinalStage externalUserId(@NotNull String externalUserId) {
            this.externalUserId = Objects.requireNonNull(externalUserId, "externalUserId must not be null");
            return this;
        }

        /**
         * <p>Array of workflow IDs to set</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllWorkflowIds(List<String> workflowIds) {
            this.workflowIds.addAll(workflowIds);
            return this;
        }

        /**
         * <p>Array of workflow IDs to set</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addWorkflowIds(String workflowIds) {
            this.workflowIds.add(workflowIds);
            return this;
        }

        /**
         * <p>Array of workflow IDs to set</p>
         */
        @java.lang.Override
        @JsonSetter(value = "workflow_ids", nulls = Nulls.SKIP)
        public _FinalStage workflowIds(List<String> workflowIds) {
            this.workflowIds.clear();
            this.workflowIds.addAll(workflowIds);
            return this;
        }

        @java.lang.Override
        public UpdateTriggerWorkflowsOpts build() {
            return new UpdateTriggerWorkflowsOpts(externalUserId, workflowIds, additionalProperties);
        }
    }
}
