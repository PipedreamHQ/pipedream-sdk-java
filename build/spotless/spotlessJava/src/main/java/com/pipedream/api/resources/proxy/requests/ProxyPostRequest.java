/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.proxy.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = ProxyPostRequest.Builder.class)
public final class ProxyPostRequest {
    private final String externalUserId;

    private final String accountId;

    private final Map<String, Object> body;

    private final Map<String, Object> additionalProperties;

    private ProxyPostRequest(
            String externalUserId,
            String accountId,
            Map<String, Object> body,
            Map<String, Object> additionalProperties) {
        this.externalUserId = externalUserId;
        this.accountId = accountId;
        this.body = body;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The external user ID for the proxy request
     */
    @JsonProperty("external_user_id")
    public String getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return The account ID to use for authentication
     */
    @JsonProperty("account_id")
    public String getAccountId() {
        return accountId;
    }

    /**
     * @return Request body to forward to the target API
     */
    @JsonProperty("body")
    public Map<String, Object> getBody() {
        return body;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof ProxyPostRequest && equalTo((ProxyPostRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(ProxyPostRequest other) {
        return externalUserId.equals(other.externalUserId)
                && accountId.equals(other.accountId)
                && body.equals(other.body);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(this.externalUserId, this.accountId, this.body);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static ExternalUserIdStage builder() {
        return new Builder();
    }

    public interface ExternalUserIdStage {
        /**
         * <p>The external user ID for the proxy request</p>
         */
        AccountIdStage externalUserId(@NotNull String externalUserId);

        Builder from(ProxyPostRequest other);
    }

    public interface AccountIdStage {
        /**
         * <p>The account ID to use for authentication</p>
         */
        _FinalStage accountId(@NotNull String accountId);
    }

    public interface _FinalStage {
        ProxyPostRequest build();

        /**
         * <p>Request body to forward to the target API</p>
         */
        _FinalStage body(Map<String, Object> body);

        _FinalStage putAllBody(Map<String, Object> body);

        _FinalStage body(String key, Object value);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder implements ExternalUserIdStage, AccountIdStage, _FinalStage {
        private String externalUserId;

        private String accountId;

        private Map<String, Object> body = new LinkedHashMap<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(ProxyPostRequest other) {
            externalUserId(other.getExternalUserId());
            accountId(other.getAccountId());
            body(other.getBody());
            return this;
        }

        /**
         * <p>The external user ID for the proxy request</p>
         * <p>The external user ID for the proxy request</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("external_user_id")
        public AccountIdStage externalUserId(@NotNull String externalUserId) {
            this.externalUserId = Objects.requireNonNull(externalUserId, "externalUserId must not be null");
            return this;
        }

        /**
         * <p>The account ID to use for authentication</p>
         * <p>The account ID to use for authentication</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("account_id")
        public _FinalStage accountId(@NotNull String accountId) {
            this.accountId = Objects.requireNonNull(accountId, "accountId must not be null");
            return this;
        }

        /**
         * <p>Request body to forward to the target API</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage body(String key, Object value) {
            this.body.put(key, value);
            return this;
        }

        /**
         * <p>Request body to forward to the target API</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllBody(Map<String, Object> body) {
            this.body.putAll(body);
            return this;
        }

        /**
         * <p>Request body to forward to the target API</p>
         */
        @java.lang.Override
        @JsonSetter(value = "body", nulls = Nulls.SKIP)
        public _FinalStage body(Map<String, Object> body) {
            this.body.clear();
            this.body.putAll(body);
            return this;
        }

        @java.lang.Override
        public ProxyPostRequest build() {
            return new ProxyPostRequest(externalUserId, accountId, body, additionalProperties);
        }
    }
}
