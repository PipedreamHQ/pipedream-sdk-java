/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.types;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.jetbrains.annotations.NotNull;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = DeployedComponent.Builder.class)
public final class DeployedComponent {
    private final String id;

    private final String ownerId;

    private final String componentId;

    private final List<ConfigurableProp> configurableProps;

    private final Map<String, Object> configuredProps;

    private final boolean active;

    private final int createdAt;

    private final int updatedAt;

    private final String name;

    private final String nameSlug;

    private final Optional<Object> callbackObservations;

    private final Map<String, Object> additionalProperties;

    private DeployedComponent(
            String id,
            String ownerId,
            String componentId,
            List<ConfigurableProp> configurableProps,
            Map<String, Object> configuredProps,
            boolean active,
            int createdAt,
            int updatedAt,
            String name,
            String nameSlug,
            Optional<Object> callbackObservations,
            Map<String, Object> additionalProperties) {
        this.id = id;
        this.ownerId = ownerId;
        this.componentId = componentId;
        this.configurableProps = configurableProps;
        this.configuredProps = configuredProps;
        this.active = active;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.name = name;
        this.nameSlug = nameSlug;
        this.callbackObservations = callbackObservations;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The unique ID of the deployed component
     */
    @JsonProperty("id")
    public String getId() {
        return id;
    }

    /**
     * @return The ID of the owner
     */
    @JsonProperty("owner_id")
    public String getOwnerId() {
        return ownerId;
    }

    /**
     * @return The ID of the component that was deployed
     */
    @JsonProperty("component_id")
    public String getComponentId() {
        return componentId;
    }

    /**
     * @return The configurable properties of the component
     */
    @JsonProperty("configurable_props")
    public List<ConfigurableProp> getConfigurableProps() {
        return configurableProps;
    }

    /**
     * @return The configured properties of the component
     */
    @JsonProperty("configured_props")
    public Map<String, Object> getConfiguredProps() {
        return configuredProps;
    }

    /**
     * @return Whether the deployed component is active
     */
    @JsonProperty("active")
    public boolean getActive() {
        return active;
    }

    /**
     * @return The timestamp when the component was deployed (epoch milliseconds)
     */
    @JsonProperty("created_at")
    public int getCreatedAt() {
        return createdAt;
    }

    /**
     * @return The timestamp when the component was last updated (epoch milliseconds)
     */
    @JsonProperty("updated_at")
    public int getUpdatedAt() {
        return updatedAt;
    }

    /**
     * @return The name of the deployed component
     */
    @JsonProperty("name")
    public String getName() {
        return name;
    }

    /**
     * @return The name slug of the deployed component
     */
    @JsonProperty("name_slug")
    public String getNameSlug() {
        return nameSlug;
    }

    @JsonProperty("callback_observations")
    public Optional<Object> getCallbackObservations() {
        return callbackObservations;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof DeployedComponent && equalTo((DeployedComponent) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(DeployedComponent other) {
        return id.equals(other.id)
                && ownerId.equals(other.ownerId)
                && componentId.equals(other.componentId)
                && configurableProps.equals(other.configurableProps)
                && configuredProps.equals(other.configuredProps)
                && active == other.active
                && createdAt == other.createdAt
                && updatedAt == other.updatedAt
                && name.equals(other.name)
                && nameSlug.equals(other.nameSlug)
                && callbackObservations.equals(other.callbackObservations);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.id,
                this.ownerId,
                this.componentId,
                this.configurableProps,
                this.configuredProps,
                this.active,
                this.createdAt,
                this.updatedAt,
                this.name,
                this.nameSlug,
                this.callbackObservations);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static IdStage builder() {
        return new Builder();
    }

    public interface IdStage {
        /**
         * <p>The unique ID of the deployed component</p>
         */
        OwnerIdStage id(@NotNull String id);

        Builder from(DeployedComponent other);
    }

    public interface OwnerIdStage {
        /**
         * <p>The ID of the owner</p>
         */
        ComponentIdStage ownerId(@NotNull String ownerId);
    }

    public interface ComponentIdStage {
        /**
         * <p>The ID of the component that was deployed</p>
         */
        ActiveStage componentId(@NotNull String componentId);
    }

    public interface ActiveStage {
        /**
         * <p>Whether the deployed component is active</p>
         */
        CreatedAtStage active(boolean active);
    }

    public interface CreatedAtStage {
        /**
         * <p>The timestamp when the component was deployed (epoch milliseconds)</p>
         */
        UpdatedAtStage createdAt(int createdAt);
    }

    public interface UpdatedAtStage {
        /**
         * <p>The timestamp when the component was last updated (epoch milliseconds)</p>
         */
        NameStage updatedAt(int updatedAt);
    }

    public interface NameStage {
        /**
         * <p>The name of the deployed component</p>
         */
        NameSlugStage name(@NotNull String name);
    }

    public interface NameSlugStage {
        /**
         * <p>The name slug of the deployed component</p>
         */
        _FinalStage nameSlug(@NotNull String nameSlug);
    }

    public interface _FinalStage {
        DeployedComponent build();

        /**
         * <p>The configurable properties of the component</p>
         */
        _FinalStage configurableProps(List<ConfigurableProp> configurableProps);

        _FinalStage addConfigurableProps(ConfigurableProp configurableProps);

        _FinalStage addAllConfigurableProps(List<ConfigurableProp> configurableProps);

        /**
         * <p>The configured properties of the component</p>
         */
        _FinalStage configuredProps(Map<String, Object> configuredProps);

        _FinalStage putAllConfiguredProps(Map<String, Object> configuredProps);

        _FinalStage configuredProps(String key, Object value);

        _FinalStage callbackObservations(Optional<Object> callbackObservations);

        _FinalStage callbackObservations(Object callbackObservations);
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder
            implements IdStage,
                    OwnerIdStage,
                    ComponentIdStage,
                    ActiveStage,
                    CreatedAtStage,
                    UpdatedAtStage,
                    NameStage,
                    NameSlugStage,
                    _FinalStage {
        private String id;

        private String ownerId;

        private String componentId;

        private boolean active;

        private int createdAt;

        private int updatedAt;

        private String name;

        private String nameSlug;

        private Optional<Object> callbackObservations = Optional.empty();

        private Map<String, Object> configuredProps = new LinkedHashMap<>();

        private List<ConfigurableProp> configurableProps = new ArrayList<>();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        @java.lang.Override
        public Builder from(DeployedComponent other) {
            id(other.getId());
            ownerId(other.getOwnerId());
            componentId(other.getComponentId());
            configurableProps(other.getConfigurableProps());
            configuredProps(other.getConfiguredProps());
            active(other.getActive());
            createdAt(other.getCreatedAt());
            updatedAt(other.getUpdatedAt());
            name(other.getName());
            nameSlug(other.getNameSlug());
            callbackObservations(other.getCallbackObservations());
            return this;
        }

        /**
         * <p>The unique ID of the deployed component</p>
         * <p>The unique ID of the deployed component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("id")
        public OwnerIdStage id(@NotNull String id) {
            this.id = Objects.requireNonNull(id, "id must not be null");
            return this;
        }

        /**
         * <p>The ID of the owner</p>
         * <p>The ID of the owner</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("owner_id")
        public ComponentIdStage ownerId(@NotNull String ownerId) {
            this.ownerId = Objects.requireNonNull(ownerId, "ownerId must not be null");
            return this;
        }

        /**
         * <p>The ID of the component that was deployed</p>
         * <p>The ID of the component that was deployed</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("component_id")
        public ActiveStage componentId(@NotNull String componentId) {
            this.componentId = Objects.requireNonNull(componentId, "componentId must not be null");
            return this;
        }

        /**
         * <p>Whether the deployed component is active</p>
         * <p>Whether the deployed component is active</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("active")
        public CreatedAtStage active(boolean active) {
            this.active = active;
            return this;
        }

        /**
         * <p>The timestamp when the component was deployed (epoch milliseconds)</p>
         * <p>The timestamp when the component was deployed (epoch milliseconds)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("created_at")
        public UpdatedAtStage createdAt(int createdAt) {
            this.createdAt = createdAt;
            return this;
        }

        /**
         * <p>The timestamp when the component was last updated (epoch milliseconds)</p>
         * <p>The timestamp when the component was last updated (epoch milliseconds)</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("updated_at")
        public NameStage updatedAt(int updatedAt) {
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * <p>The name of the deployed component</p>
         * <p>The name of the deployed component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name")
        public NameSlugStage name(@NotNull String name) {
            this.name = Objects.requireNonNull(name, "name must not be null");
            return this;
        }

        /**
         * <p>The name slug of the deployed component</p>
         * <p>The name slug of the deployed component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        @JsonSetter("name_slug")
        public _FinalStage nameSlug(@NotNull String nameSlug) {
            this.nameSlug = Objects.requireNonNull(nameSlug, "nameSlug must not be null");
            return this;
        }

        @java.lang.Override
        public _FinalStage callbackObservations(Object callbackObservations) {
            this.callbackObservations = Optional.ofNullable(callbackObservations);
            return this;
        }

        @java.lang.Override
        @JsonSetter(value = "callback_observations", nulls = Nulls.SKIP)
        public _FinalStage callbackObservations(Optional<Object> callbackObservations) {
            this.callbackObservations = callbackObservations;
            return this;
        }

        /**
         * <p>The configured properties of the component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage configuredProps(String key, Object value) {
            this.configuredProps.put(key, value);
            return this;
        }

        /**
         * <p>The configured properties of the component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage putAllConfiguredProps(Map<String, Object> configuredProps) {
            this.configuredProps.putAll(configuredProps);
            return this;
        }

        /**
         * <p>The configured properties of the component</p>
         */
        @java.lang.Override
        @JsonSetter(value = "configured_props", nulls = Nulls.SKIP)
        public _FinalStage configuredProps(Map<String, Object> configuredProps) {
            this.configuredProps.clear();
            this.configuredProps.putAll(configuredProps);
            return this;
        }

        /**
         * <p>The configurable properties of the component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addAllConfigurableProps(List<ConfigurableProp> configurableProps) {
            this.configurableProps.addAll(configurableProps);
            return this;
        }

        /**
         * <p>The configurable properties of the component</p>
         * @return Reference to {@code this} so that method calls can be chained together.
         */
        @java.lang.Override
        public _FinalStage addConfigurableProps(ConfigurableProp configurableProps) {
            this.configurableProps.add(configurableProps);
            return this;
        }

        /**
         * <p>The configurable properties of the component</p>
         */
        @java.lang.Override
        @JsonSetter(value = "configurable_props", nulls = Nulls.SKIP)
        public _FinalStage configurableProps(List<ConfigurableProp> configurableProps) {
            this.configurableProps.clear();
            this.configurableProps.addAll(configurableProps);
            return this;
        }

        @java.lang.Override
        public DeployedComponent build() {
            return new DeployedComponent(
                    id,
                    ownerId,
                    componentId,
                    configurableProps,
                    configuredProps,
                    active,
                    createdAt,
                    updatedAt,
                    name,
                    nameSlug,
                    callbackObservations,
                    additionalProperties);
        }
    }
}
