/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.accounts.requests;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.pipedream.api.core.ObjectMappers;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonInclude(JsonInclude.Include.NON_ABSENT)
@JsonDeserialize(builder = AccountsListRequest.Builder.class)
public final class AccountsListRequest {
    private final Optional<String> appId;

    private final Optional<String> externalUserId;

    private final Optional<String> oauthAppId;

    private final Optional<String> after;

    private final Optional<String> before;

    private final Optional<Integer> limit;

    private final Optional<Boolean> includeCredentials;

    private final Map<String, Object> additionalProperties;

    private AccountsListRequest(
            Optional<String> appId,
            Optional<String> externalUserId,
            Optional<String> oauthAppId,
            Optional<String> after,
            Optional<String> before,
            Optional<Integer> limit,
            Optional<Boolean> includeCredentials,
            Map<String, Object> additionalProperties) {
        this.appId = appId;
        this.externalUserId = externalUserId;
        this.oauthAppId = oauthAppId;
        this.after = after;
        this.before = before;
        this.limit = limit;
        this.includeCredentials = includeCredentials;
        this.additionalProperties = additionalProperties;
    }

    /**
     * @return The app slug or ID to filter accounts by.
     */
    @JsonProperty("app_id")
    public Optional<String> getAppId() {
        return appId;
    }

    @JsonProperty("external_user_id")
    public Optional<String> getExternalUserId() {
        return externalUserId;
    }

    /**
     * @return The OAuth app ID to filter by, if applicable
     */
    @JsonProperty("oauth_app_id")
    public Optional<String> getOauthAppId() {
        return oauthAppId;
    }

    /**
     * @return The cursor to start from for pagination
     */
    @JsonProperty("after")
    public Optional<String> getAfter() {
        return after;
    }

    /**
     * @return The cursor to end before for pagination
     */
    @JsonProperty("before")
    public Optional<String> getBefore() {
        return before;
    }

    /**
     * @return The maximum number of results to return
     */
    @JsonProperty("limit")
    public Optional<Integer> getLimit() {
        return limit;
    }

    /**
     * @return Whether to retrieve the account's credentials or not
     */
    @JsonProperty("include_credentials")
    public Optional<Boolean> getIncludeCredentials() {
        return includeCredentials;
    }

    @java.lang.Override
    public boolean equals(Object other) {
        if (this == other) return true;
        return other instanceof AccountsListRequest && equalTo((AccountsListRequest) other);
    }

    @JsonAnyGetter
    public Map<String, Object> getAdditionalProperties() {
        return this.additionalProperties;
    }

    private boolean equalTo(AccountsListRequest other) {
        return appId.equals(other.appId)
                && externalUserId.equals(other.externalUserId)
                && oauthAppId.equals(other.oauthAppId)
                && after.equals(other.after)
                && before.equals(other.before)
                && limit.equals(other.limit)
                && includeCredentials.equals(other.includeCredentials);
    }

    @java.lang.Override
    public int hashCode() {
        return Objects.hash(
                this.appId,
                this.externalUserId,
                this.oauthAppId,
                this.after,
                this.before,
                this.limit,
                this.includeCredentials);
    }

    @java.lang.Override
    public String toString() {
        return ObjectMappers.stringify(this);
    }

    public static Builder builder() {
        return new Builder();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    public static final class Builder {
        private Optional<String> appId = Optional.empty();

        private Optional<String> externalUserId = Optional.empty();

        private Optional<String> oauthAppId = Optional.empty();

        private Optional<String> after = Optional.empty();

        private Optional<String> before = Optional.empty();

        private Optional<Integer> limit = Optional.empty();

        private Optional<Boolean> includeCredentials = Optional.empty();

        @JsonAnySetter
        private Map<String, Object> additionalProperties = new HashMap<>();

        private Builder() {}

        public Builder from(AccountsListRequest other) {
            appId(other.getAppId());
            externalUserId(other.getExternalUserId());
            oauthAppId(other.getOauthAppId());
            after(other.getAfter());
            before(other.getBefore());
            limit(other.getLimit());
            includeCredentials(other.getIncludeCredentials());
            return this;
        }

        /**
         * <p>The app slug or ID to filter accounts by.</p>
         */
        @JsonSetter(value = "app_id", nulls = Nulls.SKIP)
        public Builder appId(Optional<String> appId) {
            this.appId = appId;
            return this;
        }

        public Builder appId(String appId) {
            this.appId = Optional.ofNullable(appId);
            return this;
        }

        @JsonSetter(value = "external_user_id", nulls = Nulls.SKIP)
        public Builder externalUserId(Optional<String> externalUserId) {
            this.externalUserId = externalUserId;
            return this;
        }

        public Builder externalUserId(String externalUserId) {
            this.externalUserId = Optional.ofNullable(externalUserId);
            return this;
        }

        /**
         * <p>The OAuth app ID to filter by, if applicable</p>
         */
        @JsonSetter(value = "oauth_app_id", nulls = Nulls.SKIP)
        public Builder oauthAppId(Optional<String> oauthAppId) {
            this.oauthAppId = oauthAppId;
            return this;
        }

        public Builder oauthAppId(String oauthAppId) {
            this.oauthAppId = Optional.ofNullable(oauthAppId);
            return this;
        }

        /**
         * <p>The cursor to start from for pagination</p>
         */
        @JsonSetter(value = "after", nulls = Nulls.SKIP)
        public Builder after(Optional<String> after) {
            this.after = after;
            return this;
        }

        public Builder after(String after) {
            this.after = Optional.ofNullable(after);
            return this;
        }

        /**
         * <p>The cursor to end before for pagination</p>
         */
        @JsonSetter(value = "before", nulls = Nulls.SKIP)
        public Builder before(Optional<String> before) {
            this.before = before;
            return this;
        }

        public Builder before(String before) {
            this.before = Optional.ofNullable(before);
            return this;
        }

        /**
         * <p>The maximum number of results to return</p>
         */
        @JsonSetter(value = "limit", nulls = Nulls.SKIP)
        public Builder limit(Optional<Integer> limit) {
            this.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * <p>Whether to retrieve the account's credentials or not</p>
         */
        @JsonSetter(value = "include_credentials", nulls = Nulls.SKIP)
        public Builder includeCredentials(Optional<Boolean> includeCredentials) {
            this.includeCredentials = includeCredentials;
            return this;
        }

        public Builder includeCredentials(Boolean includeCredentials) {
            this.includeCredentials = Optional.ofNullable(includeCredentials);
            return this;
        }

        public AccountsListRequest build() {
            return new AccountsListRequest(
                    appId, externalUserId, oauthAppId, after, before, limit, includeCredentials, additionalProperties);
        }
    }
}
