/**
 * This file was auto-generated by Fern from our API Definition.
 */
package com.pipedream.api.resources.apps;

import com.pipedream.api.core.ClientOptions;
import com.pipedream.api.core.ObjectMappers;
import com.pipedream.api.core.PipedreamApiClientApiException;
import com.pipedream.api.core.PipedreamApiClientException;
import com.pipedream.api.core.PipedreamApiClientHttpResponse;
import com.pipedream.api.core.QueryStringMapper;
import com.pipedream.api.core.RequestOptions;
import com.pipedream.api.core.pagination.SyncPagingIterable;
import com.pipedream.api.resources.apps.requests.AppsListRequest;
import com.pipedream.api.types.App;
import com.pipedream.api.types.GetAppResponse;
import com.pipedream.api.types.ListAppsResponse;
import java.io.IOException;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import okhttp3.Call;
import okhttp3.Callback;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import okhttp3.ResponseBody;
import org.jetbrains.annotations.NotNull;

public class AsyncRawAppsClient {
    protected final ClientOptions clientOptions;

    public AsyncRawAppsClient(ClientOptions clientOptions) {
        this.clientOptions = clientOptions;
    }

    public CompletableFuture<PipedreamApiClientHttpResponse<SyncPagingIterable<App>>> list() {
        return list(AppsListRequest.builder().build());
    }

    public CompletableFuture<PipedreamApiClientHttpResponse<SyncPagingIterable<App>>> list(AppsListRequest request) {
        return list(request, null);
    }

    public CompletableFuture<PipedreamApiClientHttpResponse<SyncPagingIterable<App>>> list(
            AppsListRequest request, RequestOptions requestOptions) {
        HttpUrl.Builder httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect/apps");
        if (request.getAfter().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "after", request.getAfter().get(), false);
        }
        if (request.getBefore().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "before", request.getBefore().get(), false);
        }
        if (request.getLimit().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "limit", request.getLimit().get(), false);
        }
        if (request.getQ().isPresent()) {
            QueryStringMapper.addQueryParameter(httpUrl, "q", request.getQ().get(), false);
        }
        if (request.getSortKey().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_key", request.getSortKey().get(), false);
        }
        if (request.getSortDirection().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "sort_direction", request.getSortDirection().get(), false);
        }
        if (request.getCategoryIds().isPresent()) {
            QueryStringMapper.addQueryParameter(
                    httpUrl, "category_ids", request.getCategoryIds().get(), true);
        }
        Request.Builder _requestBuilder = new Request.Builder()
                .url(httpUrl.build())
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json");
        Request okhttpRequest = _requestBuilder.build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiClientHttpResponse<SyncPagingIterable<App>>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        ListAppsResponse parsedResponse =
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), ListAppsResponse.class);
                        Optional<String> startingAfter =
                                parsedResponse.getPageInfo().getEndCursor();
                        AppsListRequest nextRequest = AppsListRequest.builder()
                                .from(request)
                                .after(startingAfter)
                                .build();
                        List<App> result = parsedResponse.getData();
                        future.complete(new PipedreamApiClientHttpResponse<>(
                                new SyncPagingIterable<App>(startingAfter.isPresent(), result, () -> {
                                    try {
                                        return list(nextRequest, requestOptions)
                                                .get()
                                                .body();
                                    } catch (InterruptedException | ExecutionException e) {
                                        throw new RuntimeException(e);
                                    }
                                }),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new PipedreamApiClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new PipedreamApiClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }

    public CompletableFuture<PipedreamApiClientHttpResponse<GetAppResponse>> retrieve(String appId) {
        return retrieve(appId, null);
    }

    public CompletableFuture<PipedreamApiClientHttpResponse<GetAppResponse>> retrieve(
            String appId, RequestOptions requestOptions) {
        HttpUrl httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl())
                .newBuilder()
                .addPathSegments("v1/connect/apps")
                .addPathSegment(appId)
                .build();
        Request okhttpRequest = new Request.Builder()
                .url(httpUrl)
                .method("GET", null)
                .headers(Headers.of(clientOptions.headers(requestOptions)))
                .addHeader("Accept", "application/json")
                .build();
        OkHttpClient client = clientOptions.httpClient();
        if (requestOptions != null && requestOptions.getTimeout().isPresent()) {
            client = clientOptions.httpClientWithTimeout(requestOptions);
        }
        CompletableFuture<PipedreamApiClientHttpResponse<GetAppResponse>> future = new CompletableFuture<>();
        client.newCall(okhttpRequest).enqueue(new Callback() {
            @Override
            public void onResponse(@NotNull Call call, @NotNull Response response) throws IOException {
                try (ResponseBody responseBody = response.body()) {
                    if (response.isSuccessful()) {
                        future.complete(new PipedreamApiClientHttpResponse<>(
                                ObjectMappers.JSON_MAPPER.readValue(responseBody.string(), GetAppResponse.class),
                                response));
                        return;
                    }
                    String responseBodyString = responseBody != null ? responseBody.string() : "{}";
                    future.completeExceptionally(new PipedreamApiClientApiException(
                            "Error with status code " + response.code(),
                            response.code(),
                            ObjectMappers.JSON_MAPPER.readValue(responseBodyString, Object.class),
                            response));
                    return;
                } catch (IOException e) {
                    future.completeExceptionally(
                            new PipedreamApiClientException("Network error executing HTTP request", e));
                }
            }

            @Override
            public void onFailure(@NotNull Call call, @NotNull IOException e) {
                future.completeExceptionally(
                        new PipedreamApiClientException("Network error executing HTTP request", e));
            }
        });
        return future;
    }
}
